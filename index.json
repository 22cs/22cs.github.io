[{"content":"If 2022 was the year that generative AI captured a wider public’s imagination, 2025 is the year where the new breed of generative video frameworks coming from China seems set to do the same.\n如果说 2022 年是生成式人工智能吸引更广泛公众想象力的一年，那么 2025 年似乎将是来自中国的新一代生成视频框架也将产生同样效果的一年。\nTencent’s Hunyuan Video has made a major impact on the hobbyist AI community with its open-source release of a full-world video diffusion model that users can tailor to their needs.\n腾讯混元视频开源发布全世界视频传播模型，用户可以根据自身需求进行定制，对业余人工智能社区产生了重大影响。\nClose on its heels is Alibaba’s more recent Wan 2.1, one of the most powerful image-to-video FOSS solutions of this period – now supporting customization through Wan LoRAs.\n紧随其后的是阿里巴巴最新推出的Wan 2.1 ，这是本时期最强大的图像到视频 FOSS 解决方案之一 - 现在支持通过Wan LoRA进行定制。\nBesides the availability of recent human-centric foundation model SkyReels, at the time of writing we also await the release of Alibaba’s comprehensive VACE video creation and editing suite:\n除了最近推出的以人为本的基础模型SkyReels之外，在撰写本文时，我们还在等待阿里巴巴全面的VACE视频创建和编辑套件的发布：\nhttps://www.unite.ai/wp-content/uploads/2025/03/VACE_edit2_20250313_104839_noaudio.mp4\n******Click to play. ****The pending release of Alibaba’s multi-function AI-editing suite VACE has excited the user community. **Source: https://ali-vilab.github.io/VACE-Page/\n******点击播放。**​阿里巴巴即将发布的多功能人工智能编辑套件 VACE 让用户社区兴奋不已。 来源：https://ali-vilab.github.io/VACE-Page/\n**Sudden Impact 突如其来的冲击**\nThe generative video AI research scene itself is no less explosive; it’s still the first half of March, and Tuesday’s submissions to Arxiv’s Computer Vision section (a hub for generative AI papers) came to nearly 350 entries – a figure more associated with the height of conference season.\n生成视频 AI 研究领域本身也同样具有爆炸性。现在还是三月上半月，周二提交给 Arxiv 计算机视觉部分（生成 AI 论文的中心）的论文数量已接近 350 篇 —— 这个数字与会议季的高峰期更为相关。\nThe two years since the launch of Stable Diffusion in summer of 2022 (and the subsequent development of Dreambooth and LoRA customization methods) have been characterized by the lack of further major developments, until the last few weeks, where new releases and innovations have proceeded at such a breakneck pace that it is almost impossible to keep apprised of it all, much less cover it all.\n自 2022 年夏季推出Stable Diffusion（以及随后开发Dreambooth和LoRA定制方法）以来的两年里，一直没有进一步的重大发展，直到最近几周，新版本和创新才以如此惊人的速度进行，几乎不可能随时了解所有内容，更不用说涵盖所有内容了。\nVideo diffusion models such as Hunyuan and Wan 2.1 have solved, at long last, and after years of failed efforts from hundreds of research initiatives, the problem of temporal consistency as it relates to the generation of humans, and largely also to environments and objects.\n经过数百项研究计划多年的失败努力，浑元和万 2.1 等视频传播模型终于解决了与人类生成以及很大程度上与环境和物体相关的时间一致性​问题。\nThere can be little doubt that VFX studios are currently applying staff and resources to adapting the new Chinese video models to solve immediate challenges such as face-swapping, despite the current lack of ControlNet-style ancillary mechanisms for these systems.\n毫无疑问，尽管目前这些系统缺乏ControlNet式的辅助机制，但视觉特效工作室目前正在投入人员和资源来适应新的中国视频模型，以解决诸如换脸等眼前挑战。\nIt must be such a relief that one such significant obstacle has potentially been overcome, albeit not through the avenues anticipated.\n尽管并非通过预期的途径，但如此重大的障碍有可能被克服，这一定令人感到欣慰。\nOf the problems that remain, this one, however, is not insignificant:\n然而，在仍然存在的问题中，有这个问题并不小：\nhttps://www.unite.ai/wp-content/uploads/2025/03/0-Wan2.1-rock-uphill.mp4\nClick to play. **Based on the prompt ‘A small rock tumbles down a steep, rocky hillside, displacing soil and small stones ‘, Wan 2.1, which achieved the very highest scores in the new paper, makes one simple error. Source: https://videophy2.github.io/​点击播放。**********​根据提示“一块小石头从陡峭的岩石山坡上滚落，将土壤和小石头移位”，在新论文中取得最高分的 Wan 2.1 犯了一个简单的错误。 来源：https://videophy2.github.io/\n**Up The Hill Backwards 倒着上山**\nAll text-to-video and image-to-video systems currently available, including commercial closed-source models, have a tendency to produce physics bloopers such as the one above, where the video shows a rock rolling uphill, based on the prompt ‘A small rock tumbles down a steep, rocky hillside, displacing soil and small stones ‘.目前所有可用的文本转视频和图像转视频系统，包括商业闭源模型，都有可能产生类似上述物理失误，视频显示一块石头滚​上山，其依据的是提示“一块小石头从陡峭的岩石山坡上滚落，移开了土壤和小石头”。\nOne theory as to why this happens, recently proposed in an academic collaboration between Alibaba and UAE, is that models train always on single images, in a sense, even when they’re training on videos (which are written out to single-frame sequences for training purposes); and they may not necessarily learn the correct temporal order of ‘before’ and ‘after’ pictures.关于为什么会发生这种情况，阿里巴巴和阿联酋​****最近在一次学术合作中提出了​一种理论，即从某种意义上说，模型总是在单个图像上进行训练，即使是在视频上进行训练（为了训练目的，视频被写成单帧序列）；而且它们不一定能学习****​ “之前” 和 “之后” 图片的正确时间顺序。\nHowever, the most likely solution is that the models in question have used data augmentation routines that involve exposing a source training clip to the model both forwards and backwards, effectively doubling the training data.\n然而，最有可能的解决方案是，所讨论的模型使用了数据增强程序，其中包括将源训练剪辑向前和向后暴露给模型，从而有效地使训练数据加倍。\nIt has long been known that this shouldn’t be done arbitrarily, because some movements work in reverse, but many do not. A 2019 study from the UK’s University of Bristol sought to develop a method that could distinguish equivariant, invariant and irreversible source data video clips that co-exist in a single dataset (see image below), with the notion that unsuitable source clips might be filtered out from data augmentation routines.\n人们早就知道，这种做法不能随意进行，因为有些动作是反向的，但很多动作不是。英国布里斯托大学2019 年的一项研究试图开发一种方法，可以区分单个数据集中共存的等变、不变和不可逆源数据视频片段（见下图），其理念是可以从数据增强程序中过滤掉不合适的源片段。\nExamples of three types of movement, only one of which is freely reversible while maintaining plausible physical dynamics. Source: https://arxiv.org/abs/1909.09422\n三种运动类型的示例，其中只有一种可以自由逆转，同时保持合理的物理动力学。 来源：https://arxiv.org/abs/1909.09422\nThe authors of that work frame the problem clearly:\n该作品的作者明确阐述了这个问题：\n‘We find the realism of reversed videos to be betrayed by reversal artefacts, aspects of the scene that would not be possible in a natural world. Some artefacts are subtle, while others are easy to spot, like a reversed ‘throw’ action where the thrown object spontaneously rises from the floor.“我们发现反转视频的真实感被反转伪影所背叛，这些场景在自然世界中不可能出现。有些伪影很微妙，而有些则很容易发现，比如反转的“投掷”动作，投掷的物体会自发地从地板上升起。\n‘We observe two types of reversal artefacts, physical, those exhibiting violations of the laws of nature, and improbable, those depicting a possible but unlikely scenario. These are not exclusive, and many reversed actions suffer both types of artefacts, like when uncrumpling a piece of paper.“我们观察到两种类型的逆转伪影，一种是物理的，它们表现出违反自然法则的行为，另一种是不可能发生的，它们描绘了一种可能但不太可能发生的情景。这些并不相互排斥，许多逆转动作都会遭受这两种类型的伪影，比如在展开一张纸时。\n‘Examples of physical artefacts include: inverted gravity (e.g. ‘dropping something’), spontaneous impulses on objects (e.g. ‘spinning a pen’), and irreversible state changes (e.g. ‘burning a candle’). An example of an improbable artefact: taking a plate from the cupboard, drying it, and placing it on the drying rack.“物理人工制品的例子包括：重力倒置（例如‘掉落某物’）、物体上的自发脉冲（例如‘旋转一支笔’）和不可逆的状态变化（例如‘点燃一支蜡烛’）。一个不可能人工制品的例子：从橱柜里拿出一个盘子，擦干它，然后把它放在干燥架上。\n‘This kind of re-use of data is very common at training time, and can be beneficial – for example, in making sure that the model does not learn only one view of an image or object which can be flipped or rotated without losing its central coherency and logic.“这种数据重复使用在训练时非常常见，并且可能带来好处——例如，确保模型不会只学习图像或物体的一个视图，而这些视图可以在不失去其中心连贯性和逻辑的情况下被翻转或旋转。\n‘This only works for objects that are truly symmetrical, of course; and learning physics from a ‘reversed’ video only works if the reversed version makes as much sense as the forward version.’“当然，这只适用于真正对称的物体；并且，只有当反转版本与正转版本一样有意义时，从‘反转’视频中学习物理才有效。”\n**Temporary Reversals 暂时撤销**\nWe don’t have any evidence that systems such as Hunyuan Video and Wan 2.1 allowed arbitrarily ‘reversed’ clips to be exposed to the model during training (neither group of researchers has been specific regarding data augmentation routines).\n我们没有任何证据表明浑元视频和 Wan 2.1 等系统允许在训练期间将任意“反转”的剪辑暴露给模型（两组研究人员都没有具体说明数据增强程序）。\nYet the only reasonable alternative possibility, in the face of so many reports (and my own practical experience), would seem to be that hyperscale datasets powering these model may contain clips that actually feature movements occurring in reverse.\n然而，面对如此多的报告（以及我自己的实际经验），唯一合理的替代可能性似乎是，支持这些模型的超大规模数据集可能包含实际上以反向发生的运动为特征的剪辑。\nThe rock in the example video embedded above was generated using Wan 2.1, and features in a new study that examines how well video diffusion models handle physics.\n上面嵌入的示例视频中的岩石是使用 Wan 2.1 生成的，并在一项研究视频扩散模型如何处理物理问题的新研究中出现。\nIn tests for this project, Wan 2.1 achieved a score of only 22% in terms of its ability to consistently adhere to physical laws.\n在该项目的测试中，Wan 2.1 在始终遵循物理定律的能力方面仅取得了 22% 的分数。\nHowever, that’s the best score of any system tested for the work, indicating that we may have found our next stumbling block for video AI:\n然而，这是所有经过测试的系统中最好的分数，这表明我们可能已经找到了视频 AI 的下一个绊脚石：\nScores obtained by leading open and closed-source systems, with the output of the frameworks evaluated by human annotators. Source: https://arxiv.org/pdf/2503.06800\n领先的开源和闭源系统获得的分数，框架的输出由人工注释者评估。 来源：https://arxiv.org/pdf/2503.06800\nThe authors of the new work have developed a benchmarking system, now in its second iteration, called VideoPhy, with the code available at GitHub.\n这项新研究的作者开发了一个基准测试系统，目前已是第二次迭代，名为VideoPhy ，其代码可在 GitHub 上找到。\nThough the scope of the work is beyond what we can comprehensively cover here, let’s take a general look at its methodology, and its potential for establishing a metric that could help steer the course of future model-training sessions away from these bizarre instances of reversal.\n虽然这项工作的范围超出了我们在这里可以全面涵盖的范围，但让我们总体看一下它的方法，以及建立一个指标的潜力，该指标可以帮助引导未来的模型训练过程远离这些奇怪的逆转情况。\nThe study, conducted by six researchers from UCLA and Google Research, is called VideoPhy-2: A Challenging Action-Centric Physical Commonsense Evaluation in Video Generation. A crowded accompanying project site is also available, along with code and datasets at GitHub, and a dataset viewer at Hugging Face.\n这项研究由来自加州大学洛杉矶分校和谷歌研究院的六名研究人员共同开展，名为VideoPhy-2：视频生成中具有挑战性的以动作为中心的物理常识评估。该项目还提供了一个内容丰富的配套网站，以及GitHub 上的代码和数据集，以及Hugging Face 上的数据集查看器。\nhttps://www.unite.ai/wp-content/uploads/2025/03/0-Sora_lake.mp4\nClick to play. ********Here, the feted OpenAI Sora model fails to understand the interactions between oars and reflections, and is not able to provide a logical physical flow either for the person in the boat or the way that the boat interacts with her.​点击播放。**********​在这里，备受推崇的 OpenAI Sora 模型无法理解桨和反射之间的相互作用，无法为船上的人或船与人互动的方式提供合乎逻辑的物理流程。**\n**Method 方法**\nThe authors describe the latest version of their work, VideoPhy-2, as a ‘challenging commonsense evaluation dataset for real-world actions.’ The collection features 197 actions across a range of diverse physical activities such as hula-hooping, gymnastics and tennis, as well as object interactions, such as bending an object until it breaks.\n作者将他们最新推出的VideoPhy-2描述为“针对现实世界动作的具有挑战性的常识性评估数据集”。该数据集涵盖了 197 种动作，涵盖了各种体育活动，例如呼啦圈、体操和网球，以及物体交互，例如弯曲物体直至其断裂。\nA large language model (LLM) is used to generate 3840 prompts from these seed actions, and the prompts are then used to synthesize videos via the various frameworks being trialed.\n大型语言模型 (LLM) 用于从这些种子操作生成 3840 个提示，然后使用这些提示通过正在试用的各种框架合成视频。\nThroughout the process the authors have developed a list of ‘candidate’ physical rules and laws that AI-generated videos should satisfy, using vision-language models for evaluation.\n在整个过程中，作者使用视觉语言模型进行评估，制定了人工智能生成的视频应该满足的“候选”物理规则和定律列表。\nThe authors state:\n作者指出：\n‘For example, in a video of sportsperson playing tennis, a physical rule would be that a tennis ball should follow a parabolic trajectory under gravity. For gold-standard judgments, we ask human annotators to score each video based on overall semantic adherence and physical commonsense, and to mark its compliance with various physical rules.’“例如，在运动员打网球的视频中，物理规则是网球在重力作用下应遵循抛物线轨迹。为了做出黄金标准判断，我们要求人类注释者根据整体语义遵循度和物理常识对每个视频进行评分，并标记其是否符合各种物理规则。”\nAbove: A text prompt is generated from an action using an LLM and used to create a video with a text-to-video generator. A vision-language model captions the video, identifying possible physical rules at play. Below: Human annotators evaluate the video’s realism, confirm rule violations, add missing rules, and check whether the video matches the original prompt.上图：使用 LLM 从操作生成文本提示，并使用文本转视频生成器创建视频。视觉语言模型为视频添加字幕，识别可能起作用的物理规则。下图：人工注释者评估视频的真实性，确认规则违规，添加缺失的规则，并检查视频是否与原始提示相符。\nInitially the researchers curated a set of actions to evaluate physical commonsense in AI-generated videos. They began with over 600 actions sourced from the Kinetics, UCF-101, and SSv2 datasets, focusing on activities involving sports, object interactions, and real-world physics.\n最初，研究人员精心挑选了一组动作来评估 AI 生成的视频中的物理常识。他们从Kinetics 、 UCF-101和SSv2数据集中选取了 600 多个动作，重点关注涉及运动、物体交互和现实世界物理的活动。\nTwo independent groups of STEM-trained student annotators (with a minimum undergraduate qualification obtained) reviewed and filtered the list, selecting actions that tested principles such as gravity, momentum, and elasticity, while removing low-motion tasks such as typing, petting a cat, or chewing.\n两个独立的、接受过 STEM 培训的学生注释者小组（至少获得本科学历）审查并筛选了该列表，选择了测试重力、动量和弹性等原理的动作，同时删除了打字、抚摸猫或咀嚼等低运动任务。\nAfter further refinement with Gemini-2.0-Flash-Exp to eliminate duplicates, the final dataset included 197 actions, with 54 involving object interactions and 143 centered on physical and sports activities:\n在使用Gemini-2.0-Flash-Exp进一步细化以消除重复后，最终数据集包含 197 个动作，其中 54 个涉及物体交互，143 个以身体和体育活动为中心：\nSamples from the distilled actions.从提炼的动作中得到的样本。\nIn the second stage, the researchers used Gemini-2.0-Flash-Exp to generate 20 prompts for each action in the dataset, resulting in a total of 3,940 prompts. The generation process focused on visible physical interactions that could be clearly represented in a generated video. This excluded non-visual elements such as emotions, sensory details, and abstract language, but incorporated diverse characters and objects.\n在第二阶段，研究人员使用 Gemini-2.0-Flash-Exp 为数据集中的每个动作生成 20 个提示，总共得到 3,940 个提示。生成过程侧重于可见的身体互动，这些互动可以在生成的视频中清晰呈现。这排除了情绪、感官细节和抽象语言等非视觉元素，但融入了多样化的角色和物体。\nFor example, instead of a simple prompt like ‘An archer releases the arrow’ , the model was guided to produce a more detailed version such as ‘An archer draws the bowstring back to full tension, then releases the arrow, which flies straight and strikes a bullseye on a paper target‘.\n例如，与“弓箭手射出箭” 这样简单的提示不同，模型被引导产生更详细的版本，如 “弓箭手将弓弦拉回至完全绷紧状态，然后射出箭，箭笔直飞行并击中纸靶上的靶心”。\nSince modern video models can interpret longer descriptions, the researchers further refined the captions using the Mistral-NeMo-12B-Instruct prompt upsampler, to add visual details without altering the original meaning.\n由于现代视频模型可以解释更长的描述，研究人员使用Mistral-NeMo-12B-Instruct提示上采样器进一步细化了字幕，以添加视觉细节而不改变原始含义。\nSample prompts from VideoPhy-2, categorized by physical activities or object interactions. Each prompt is paired with its corresponding action and the relevant physical principle it tests.VideoPhy-2 的示例提示，按身体活动或物体交互分类。每个提示都与其相应的动作和它测试的相关物理原理配对。\nFor the third stage, physical rules were not derived from text prompts but from generated videos, since generative models can struggle to adhere to conditioned text prompts.\n对于第三阶段，物理规则不是来自文本提示，而是来自生成的视频，因为生成模型很难遵守条件文本提示。\nVideos were first created using VideoPhy-2 prompts, then ‘up-captioned’ with Gemini-2.0-Flash-Exp to extract key details. The model proposed three expected physical rules per video, which human annotators reviewed and expanded by identifying additional potential violations.\n视频首先使用 VideoPhy-2 提示创建，然后使用 Gemini-2.0-Flash-Exp 进行“上行字幕”以提取关键细节。该模型为每个视频提出了三条预期的物理规则，人工注释者通过识别其他潜在违规行为来审查和扩展这些规则。\nExamples from the upsampled captions.来自上采样字幕的示例。\nNext, to identify the most challenging actions, the researchers generated videos using CogVideoX-5B with prompts from the VideoPhy-2 dataset. They then selected 60 actions out of 197 where the model consistently failed to follow both the prompts and basic physical commonsense.\n接下来，为了找出最具挑战性的动作，研究人员使用CogVideoX-5B生成视频，其中提示来自 VideoPhy-2 数据集。然后，他们从 197 个动作中选出了 60 个动作，这些动作模型始终无法遵循提示和基本的物理常识。\nThese actions involved physics-rich interactions such as momentum transfer in discus throwing, state changes such as bending an object until it breaks, balancing tasks such as tightrope walking, and complex motions that included back-flips, pole vaulting, and pizza tossing, among others. In total, 1,200 prompts were chosen to increase the difficulty of the sub-dataset.\n这些动作涉及物理特性丰富的互动，例如掷铁饼时的动量传递、状态变化（例如弯曲物体直至其断裂）、平衡任务（例如走钢丝）以及包括后空翻、撑杆跳和扔披萨等复杂动作。总共选择了 1,200 个提示来增加子数据集的难度。\nThe resulting dataset comprised 3,940 captions – 5.72 times more than the earlier version of VideoPhy. The average length of the original captions is 16 tokens, while upsampled captions reaches 138 tokens – 1.88 times and 16.2 times longer, respectively.\n最终的数据集包含 3,940 个字幕，比 VideoPhy 的早期版本多 5.72 倍。原始字幕的平均长度为 16 个标记，而上采样字幕则达到 138 个标记，分别是 1.88 倍和 16.2 倍。\nThe dataset also features 102,000 human annotations covering semantic adherence, physical commonsense, and rule violations across multiple video generation models.\n该数据集还包含 102,000 条人工注释，涵盖多个视频生成模型的语义遵从性、物理常识和规则违规。\n**Evaluation 评估**\nThe researchers then defined clear criteria for evaluating the videos. The main goal was to assess how well each video matched its input prompt and followed basic physical principles.\n研究人员随后制定了评估视频的明确标准。主要目标是评估每个视频与输入提示的匹配程度以及遵循基本物理原理的程度。\nInstead of simply ranking videos by preference, they used rating-based feedback to capture specific successes and failures. Human annotators scored videos on a five-point scale, allowing for more detailed judgments, while the evaluation also checked whether videos followed various physical rules and laws.\n他们不是简单地根据喜好对视频进行排序，而是使用基于评分的反馈来捕捉具体的成功和失败。人工注释者按照五分制对视频进行评分，以便做出更详细的判断，同时评估还检查视频是否遵循各种物理规则和定律。\nFor human evaluation, a group of 12 annotators were selected from trials on Amazon Mechanical Turk (AMT), and provided ratings after receiving detailed remote instructions. For fairness, semantic adherence and physical commonsense were evaluated separately (in the original VideoPhy study, they were assessed jointly).\n对于人工评估，从 Amazon Mechanical Turk (AMT) 的试验中选出了一组 12 名注释者，并在收到详细的远程指令后提供评分。为了公平起见，语义遵守和物理常识是分开评估的（在最初的 VideoPhy 研究中，它们是联合评估的）。\nThe annotators first rated how well videos matched their input prompts, then separately evaluated physical plausibility, scoring rule violations and overall realism on a five-point scale. Only the original prompts were shown, to maintain a fair comparison across models.\n注释者首先评估视频与输入提示的匹配程度，然后分别评估物理合理性、评分规则违规和整体真实性（五分制）。仅显示原始提示，以保持模型之间的公平比较。\nThe interface presented to the AMT annotators.向 AMT 注释者呈现的界面。\nThough human judgment remains the gold standard, it’s expensive and comes with a number of caveats. Therefore automated evaluation is essential for faster and more scalable model assessments.\n尽管人类判断仍然是黄金标准，但它成本高昂，并且存在许多注意事项。因此，自动化评估对于更快、更具可扩展性的模型评估至关重要。\nThe paper’s authors tested several video-language models, including Gemini-2.0-Flash-Exp and VideoScore, on their ability to score videos for semantic accuracy and for ‘physical commonsense’.\n论文作者测试了几种视频语言模型，包括 Gemini-2.0-Flash-Exp 和VideoScore ，测试它们对视频的语义准确性和“物理常识”进行评分的能力。\nThe models again rated each video on a five-point scale, while a separate classification task determined whether physical rules were followed, violated, or unclear.\n模型再次根据五分量表对每个视频进行评分，而单独的分类任务则确定是否遵循、违反或不清楚物理规则。\nExperiments showed that existing video-language models struggled to match human judgments, mainly due to weak physical reasoning and the complexity of the prompts. To improve automated evaluation, the researchers developed VideoPhy-2-Autoeval, a 7B-parameter model designed to provide more accurate predictions across three categories: semantic adherence; physical commonsense; and rule compliance, fine-tuned on the VideoCon-Physics model using 50,000 human annotations*.\n实验表明，现有的视频语言模型很难与人类判断相匹配，主要是因为物理推理能力较弱，提示内容复杂。为了改进自动评估，研究人员开发了VideoPhy-2-Autoeval ，这是一个 7B 参数模型，旨在在三个类别中提供更准确的预测：语义遵循、物理常识和规则遵守，使用 50,000 个人工注释* 在VideoCon-Physics模型上进行了微调。\n**Data and Tests 数据和测试**\nWith these tools in place, the authors tested a number of generative video systems, both through local installations and, where necessary, via commercial APIs: CogVideoX-5B; VideoCrafter2; HunyuanVideo-13B; Cosmos-Diffusion; Wan2.1-14B; OpenAI Sora; and Luma Ray.\n利用这些工具，作者测试了许多生成视频系统，既通过本地安装，也通过商业 API（必要时）：CogVideoX-5B； VideoCrafter2 ； HunyuanVideo-13B ； Cosmos-Diffusion ；Wan2.1-14B； OpenAI Sora ；和Luma Ray 。\nThe models were prompted with upsampled captions where possible, except that Hunyuan Video and VideoCrafter2 operate under 77-token CLIP limitations, and cannot accept prompts above a certain length.\n模型在可能的情况下都使用上采样字幕进行提示，但 Hunyuan Video 和 VideoCrafter2 在 77 个令牌CLIP限制下运行，并且不能接受超过一定长度的提示。\nVideos generated were kept to less than 6 seconds, since shorter output is easier to evaluate.\n生成的视频保持在 6 秒以内，因为较短的输出更容易评估。\nThe driving data was from the VideoPhy-2 dataset, which was split into a benchmark and training set. 590 videos were generated per model, except for Sora and Ray2; due to the cost factor (equivalent lower numbers of videos were generated for these).\n驾驶数据来自 VideoPhy-2 数据集，该数据集被分为基准和训练集。除 Sora 和 Ray2 外，每个模型生成了 590 个视频；由于成本因素（这些模型生成的视频数量较少）。\n(Please refer to the source paper for further evaluation details, which are exhaustively chronicled there)（有关进一步的评估细节，请参阅源论文，其中有详尽的记录）\nThe initial evaluation dealt with physical activities/sports (PA) and object interactions (OI), and tested both the general dataset and the aforementioned ‘harder’ subset:\n初步评估涉及体育活动/运动（PA）和物体交互（OI），并测试了一般数据集和前面提到的“更难”子集：\nResults from the initial round.初轮结果。\nHere the authors comment:\n以下是作者的评论：\n‘Even the best-performing model, Wan2.1-14B, achieves only 32.6% and 21.9% on the full and hard splits of our dataset, respectively. Its relatively strong performance compared to other models can be attributed to the diversity of its multimodal training data, along with robust motion filtering that preserves high-quality videos across a wide range of actions.“即使是性能最佳的模型 Wan2.1-14B，在我们数据集的完整分割和硬分割中也仅分别达到 32.6% 和 21.9%。与其他模型相比，其相对强劲的性能可以归因于其多模态训练数据的多样性，以及可在各种动作中保留高质量视频的强大运动过滤功能。\n‘Furthermore, we observe that closed models, such as Ray2, perform worse than open models like Wan2.1-14B and CogVideoX-5B. This suggests that closed models are not necessarily superior to open models in capturing physical commonsense.“此外，我们观察到封闭模型（例如 Ray2）的表现比开放模型（例如 Wan2.1-14B 和 CogVideoX-5B）更差。这表明封闭模型在捕捉物理常识方面并不一定优于开放模型。\n‘Notably, Cosmos-Diffusion-7B achieves the second-best score on the hard split, even outperforming the much larger HunyuanVideo-13B model. This may be due to the high representation of human actions in its training data, along with synthetically rendered simulations.’“值得注意的是，Cosmos-Diffusion-7B 在硬分割上取得了第二好的成绩，甚至超过了更大的 HunyuanVideo-13B 模型。这可能是由于其训练数据中人类行为的代表性高，以及合成渲染的模拟。”\nThe results showed that video models struggled more with physical activities like sports than with simpler object interactions. This suggests that improving AI-generated videos in this area will require better datasets – particularly high-quality footage of sports such as tennis, discus, baseball, and cricket.\n结果表明，视频模型在处理体育等体力活动时比处理简单的物体交互时更吃力。这表明，要改进该领域的人工智能视频，需要更好的数据集——尤其是网球、铁饼、棒球和板球等运动的高质量镜头。\nThe study also examined whether a model’s physical plausibility correlated with other video quality metrics, such as aesthetics and motion smoothness. The findings revealed no strong correlation, meaning a model cannot improve its performance on VideoPhy-2 just by generating visually appealing or fluid motion – it needs a deeper understanding of physical commonsense.\n该研究还考察了模型的物理合理性是否与其他视频质量指标（如美观性和运动流畅度）相关。研究结果显示，二者之间没有很强的相关性，这意味着模型不能仅通过生成视觉吸引力或流畅的运动来提高其在 VideoPhy-2 上的性能——它需要对物理常识有更深入的理解。\nThough the paper provides abundant qualitative examples, few of the static examples provided in the PDF seem to relate to the extensive video-based examples that the authors furnish at the project site. Therefore we will look at a small selection of the static examples and then some more of the actual project videos.\n尽管本文提供了丰富的定性示例，但 PDF 中提供的静态示例似乎很少与作者在项目现场提供的大量基于视频的示例相关。因此，我们将查看一小部分静态示例，然后再查看一些实际项目视频。\nThe top row shows videos generated by Wan2.1. (a) In Ray2, the jet-ski on the left lags behind before moving backward. (b) In Hunyuan-13B, the sledgehammer deforms mid-swing, and a broken wooden board appears unexpectedly. (c) In Cosmos-7B, the javelin expels sand before making contact with the ground.上排是 Wan2.1 生成的视频。（a）在 Ray2 中，左侧的水上摩托艇落后后向后移动。（b）在浑源-13B 中，大锤在挥动过程中发生变形，一块破碎的木板意外出现。（c）在宇宙-7B 中，标枪在接触地面之前就喷出了沙子。\nRegarding the above qualitative test, the authors comment:\n对于上述定性测试，作者评论道：\n‘[We] observe violations of physical commonsense, such as jetskis moving unnaturally in reverse and the deformation of a solid sledgehammer, defying the principles of elasticity. However, even Wan suffers from the lack of physical commonsense, as shown in [the clip embedded at the start of this article].“[我们] 观察到违反物理常识的行为，例如水上摩托艇不自然地反向移动，以及实心大锤的变形，这些都违背了弹性原理。然而，就连万也缺乏物理常识，正如 [本文开头嵌入的剪辑] 所示。\n‘In this case, we highlight that a rock starts rolling and accelerating uphill, defying the physical law of gravity.’“在这种情况下，我们强调一块岩石开始滚动并加速上坡，违反了引力的物理定律。”\nFurther examples from the project site:\n来自项目现场的更多示例：\nhttps://www.unite.ai/wp-content/uploads/2025/03/0-Cosmos_towel.mp4\n****Click to play. ****Here the caption was ‘A person vigorously twists a wet towel, water spraying outwards in a visible arc’ – but the resulting source of water is far more like a water-hose than a towel.​点击播放。****​这里的标题是“一个人用力扭动一条湿毛巾，水以可见的弧线向外喷出”——但由此产生的水源更像是水管而不是毛巾。\nhttps://www.unite.ai/wp-content/uploads/2025/03/0-Ray2_spills.mp4\nClick to play. ** Here the caption was ‘A chemist pours a clear liquid from a beaker into a test tube, carefully avoiding spills’, but we can see that the volume of water being added to the beaker is not consistent with the amount exiting the jug.**\n******点击播放。**​这里的标题是“一位化学家将烧杯中的透明液体倒入试管中，小心避免溢出”，但我们可以看到加入烧杯的水量与从水壶中流出的水量不一致。\nAs I mentioned at the outset, the volume of material associated with this project far exceeds what can be covered here. Therefore please refer to the source paper, project site and related sites mentioned earlier, for a truly exhaustive outline of the authors’ procedures, and considerably more testing examples and procedural details.\n正如我在一开始提到的，与该项目相关的材料量远远超出了本文所能涵盖的范围。因此，请参阅前面提到的源论文、项目网站和相关网站，以获得作者程序的真正详尽概述，以及更多的测试示例和程序细节。\n* As for the provenance of the annotations, the paper only specifies ‘acquired for these tasks’ – it seems a lot to have been generated by 12 AMT workers.\n*至于注释的来源，论文只指定了“为这些任务而获得的”——其中很多似乎都是由 12 名 AMT 工作者生成的。\nFirst published Thursday, March 13, 2025首次发布于 2025 年 3 月 13 日星期四\n","date":"2025-03-19","permalink":"https://22cs.github.io/post/why-ai-video-sometimes-gets-it-backwards-why-ai-videos-sometimes-gets-it-backwards-zrash3.html","title":"Why AI Video Sometimes Gets It Backwards为什么人工智能视频有时会出错"},{"content":"Gamification is not the same as game design, because it adds game-like elements to non-gaming environments. However, there is some overlap between game design and gamification design, and one area in which this is the case is with player types. The better you understand your players, the better you can cater to their needs.​游戏化​与游戏设计不同，因为它将类似游戏的元素添加到非游戏环境中。然而，游戏设计和游戏化设计之间有一些重叠，其中一个领域就是玩家类型。你越了解你的玩家，你就越能满足他们的需求。\nThe Psychology of the Player 玩家的心理\nWhen you’re using gamification in the enterprise world, it’s a good idea to understand how your players like to approach playing games. Good news - there is a simple measure designed by Richard Bartle, the Bartle Test of Psychology, which breaks up the way people play games into four simple categories. These categories are the Achiever, the Explorer, the Socializer, and the Killer.\n当您在企业界使用游戏化时，了解玩家喜欢以何种方式玩游戏是个好主意。好消息是，理查德·巴特尔 (Richard Bartle) 设计了一个简单的测量方法，即巴特尔心理学测试，它将人们玩游戏的方式分为四个简单的类别。这些类别是成就者、探索者、社交者和杀手。\nIt’s worth noting that these categories aren’t rigid. Most people display some traits in more than one category. However, most people have a dominant trait which determines their overall preference. If you know where the majority of your players fall using this tool, you can use it to inform the majority of features you will use, and then just add a small number of features that appeal to each of the other categories.\n值得注意的是，这些类别并不是固定不变的。大多数人会表现出不止一种类别的特征。但是，大多数人都有一个主导特征，决定了他们的整体偏好。如果您知道大多数玩家使用此工具时属于哪个类别，则可以使用它来告知您将使用的大多数功能，然后只需添加少量对其他每个类别有吸引力的功能即可。\nThe Achiever 成就者\nAchievers are all about points and status. They want to be able to show their friends how they are progressing. They like to collect badges and put them on display. This is the type of person who responds particularly well to incentive schemes such as Air Miles, where every additional mile collected is an achievement in its own right. Bartle estimates that roughly 10% of people are players of the Achiever type. Chances are you will know several people of this sort; someone who boasts he used a quicker route to get to a destination than his friend did is an Achiever type.\n成就者只关心积分和地位。他们希望能够向朋友展示自己的进步。他们喜欢收集徽章并展示出来。这类人对航空里程等激励计划反应特别好，因为每多收集一英里，本身就是一项成就。Bartle 估计大约有 10% 的人是成就者类型的玩家。你很可能认识几个这样的人；有人夸耀自己比朋友走的更快的路线到达目的地，他就属于成就者类型。\nIncorporating points and badges can help achievers enjoy a gamified experience.\n结合积分和徽章可以帮助成就者享受游戏化的体验。\n© Seananiganz, Fair Use\n© Seananiganz，合理使用\nThe Explorer 探索者\nExplorers want to see new things and discover new secrets. They’re not as bothered about points or prizes. For them, discovery is the prize. Explorers are fine with repetitive tasks as long as they eventually “unlock” a new area of the game, or they deliver some kind of “Easter Egg” **(an Easter Egg is a small bonus within a game – sometimes it’s as simple as a little joke, whereas in other cases it might be a full extra video sequence regarding what has been accomplished). Explorers really enjoy the surprise that’s possible in a game, and around 10% of players fit into this category. These are the players who will feel at walls in a game in order to access a secret passage; their satisfaction on doing so is what makes them tick, not bragging to their friends about their discovery. Build this sort of feature into your gamification design—and you’ll be speaking their language.探索者希望看到新事物并发现新秘密。他们不太在意积分或奖品。对他们来说，**​发现就是奖品。探索者不介意重复的任务，只要他们最终“解锁”游戏的新区域，或者提供某种“复活节彩蛋”（复活节彩蛋是游戏中的小奖励——有时它只是一个简单的小笑话，而在其他情况下，它可能是有关已完成任务的完整额外视频序列）。探索者真的很喜欢游戏中可能出现的惊喜，大约 10% 的玩家属于这一类。这些玩家会在游戏中触摸墙壁以进入秘密通道；这样做的满足感是他们玩得开心的原因，而不是向朋友吹嘘他们的发现。将这种功能融入您的游戏化设计中——您将使用他们的语言。\nExplorer player types want to see new things and experience new outcomes.\n探索型玩家希望看到新事物并体验新的结果。\n© YouSonOFaSnitch, Fair Use\n© YouSonOFaSnitch，合理使用\nThe Socializer 社交者\nThe vast majority of players are Socializers. That’s almost 80% of people who play games. Socializers experience fun in their games through their interaction with other players. Socializers are happy to collaborate in order to achieve bigger and better things than they could on their own. Games, such as Farmville (Facebook’s largest game), appeal to the Socializer. For instance, Socializers are happy to water someone else’s farm in exchange for new crops for their own farm. For example, office workers who leave at the end of the day and remind each other to water each others’ crops may be friends… or they may just be acquaintances. Whatever the deal is, the point with Socializers is that joining forces makes sense to them. Note—this is the last place you’ll find fierce competition, but it doesn’t mean Socializers are passive milksops who lack ambition.\n绝大多数玩家都是社交型玩家。几乎 80% 的玩家都是社交型玩家。社交型玩家通过与其他玩家的互动在游戏中体验乐趣。社交型玩家乐于合作，以实现比他们自己单打独斗时更大更好的目标。诸如《Farmville》（Facebook 最大的游戏）等游戏对社交型玩家很有吸引力。例如，社交型玩家乐于为他人的农场浇水，以换取自己农场的新作物。例如，下班后提醒彼此浇水的办公室职员可能是朋友……或者他们可能只是熟人。无论如何，社交型玩家的重点是，联合起来对他们来说是有意义的。注意——这是你最不可能发现激烈竞争的地方，但这并不意味着社交型玩家是缺乏野心的被动懦夫。\nGames such as Farmville incorporate social experiences which appeal to Socializer player types.\nFarmville 等游戏融入了社交体验，吸引了社交型玩家类型。\n© Ryan Tanaka, Fair Use.\n© Ryan Tanaka，合理使用。\nThe Killer 凶手\nThe Killer denotes an ominous-sounding type, but one that is nonetheless valid. Killers are similar to Achievers in the way that they get a thrill from gaining points and winning status too. What sets them apart from Achievers is that the Killers want to see other people lose. They’re highly competitive, and winning is what motivates them. They want to be the best at the game—and it should come as little surprise that the only way for that to be true is if they beat everyone else. You may expect this personality type to be common, but Bartle’s research suggests that only a small number of players are Killers – less than 1% to be precise.\n杀手型人格听起来不祥，但却是真实存在的。杀手型人格与成就型人格相似，他们也会从获得积分和胜利中获得快感。与成就型人格不同之处在于，杀手型人格希望看到其他人失败。他们竞争意识很强，获胜是他们的动力。他们希望成为游戏中的佼佼者——而要成为佼佼者，唯一的办法就是打败所有其他人，这应该并不奇怪。你可能认为这种性格类型很常见，但 Bartle 的研究表明，只有少数玩家是杀手型人格——准确地说，不到 1%。\nSome people, who have the Killer player type dominant in their gaming nature, are only really happy when they’re winning and everyone else is losing.\n有些人的游戏天性中以杀手型玩家为主，只有在自己赢而其他人都输的时候才会真正感到快乐。\n© Tripwire Interactive, CC BY-SA 3.0\n© Tripwire Interactive，CC BY-SA 3.0\nDon’t Stereotype 不要刻板印象\nGiven these four types, and especially the potentially dramatic appearance of the Killer, we might feel tempted to think of someone we know of and say, “Yes—he’s a Killer type. He’s only happy when he’s destroyed a city full of zombies on multi-player and knocks the other players out of the game.” Be that as it may in the case of that creepy lost-cause ex-friend who would barricade himself in his house on the weekend so he could ‘kill’ to his heart’s content, we have to look deeper. Also, there’s more to a Killer than a need to make others ‘bleed’, in the same way that Socializers don’t mindlessly flit about watering each other’s cyber-corn. Remember, more than one type may power the thought patterns of your players. Knowing them and understanding the context of their working environment is all-important.\n鉴于这四种类型，尤其是杀手可能具有的戏剧性外表，我们可能会忍不住想起我们认识的某个人，然后说：“是的，他是杀手类型。只有在多人游戏中摧毁一座充满僵尸的城市，并将其他玩家赶出游戏时，他才会感到高兴。”但对于那个周末把自己关在家里，随心所欲地“杀人”的令人毛骨悚然的失败前朋友，我们必须更深入地了解。此外，杀手不仅仅是需要让别人“流血”，就像社交者不会漫无目的地四处飞来飞去浇灌彼此的网络玉米一样。请记住，不止一种类型可以影响玩家的思维模式。了解他们并理解他们的工作环境背景至关重要。\n“Stereotypes are fast and easy, but they are lies and the truth takes its time.”\n“刻板印象的形成既快又容易，但它们是谎言，而真相需要时间。”\n—Deb Caletti, Award-winning Author\n—Deb Caletti，获奖作家\nIt can be easy to assume that a competitive sales environment consists of Killers and Achievers, but it’s best to determine this through survey and observation. What’s the exact nature of the working culture around your players? What would spur them on to achieve what goal in your design? In the references below, you’ll find a link to the Bartle Test. Why not try it for yourself—and then ask your players to try it?\n很容易假设竞争激烈的销售环境由杀手型和成就型组成，但最好通过调查和观察来确定这一点。你的玩家周围的工作文化究竟是什么？什么会激励他们实现你设计中的什么目标？在下面的参考资料中，你会找到 Bartle 测试的链接。为什么不自己尝试一下——然后让你的玩家也尝试一下呢？\nKillers and Achievers are most likely to appreciate features such as leaderboards; Socializers and Explorers, not so much. Developing the right mechanics for your players becomes much easier once you understand the way they like to approach a game.\n杀手型玩家和成就型玩家最有可能喜欢排行榜等功能；社交型玩家和探索型玩家则不然。一旦您了解了玩家喜欢的游戏方式，为玩家开发合适的机制就会变得容易得多。\nIf you know the Bartle Player Types of your players, it will become much easier to meet their needs.\n如果您了解您的球员的 Bartle 球员类型，那么满足他们的需求就会变得容易得多。\nThe Take Away 总结\nThere are four player types according to Bartle: Socializers, Explorers, Achievers and Killers. A gamification environment may consist of all or any combination of these types. Careful player research will help you to understand which player types dominate the environment and thus help define how you will cater to their needs. It’s important to do the research and not just stereotype players. Understand what makes them tick and you’ll be able to incorporate features in your designs that will really latch with their inherent natures as players.\n根据 Bartle 的说法，玩家类型有四种：社交型、探索型、成就型和杀手型。游戏化环境可能由所有这些类型或任意组合组成。仔细的玩家研究将帮助您了解哪些类型的玩家在环境中占主导地位，从而帮助您确定如何满足他们的需求。重要的是进行研究，而不仅仅是对玩家进行刻板印象。了解是什么让他们兴奋，您将能够在设计中加入真正符合他们作为玩家的固有性质的功能。\nReferences \u0026 Where to Learn More 参考资料及更多信息\nCourse: Gamification - How to Create Engaging User Experiences\n课程：游戏化 - 如何创造引人入胜的用户体验\nRead about the Bartle Test\n了解Bartle 测试\nThen, if you like, take the Bartle Test here\n如果你愿意，可以在这里参加 Bartle 测试\nJanaki Mythily Kumar and Mario Herger, Gamification at Work: Designing Engaging Business Software, The Interaction Design Foundation, 2014\nJanaki Mythily Kumar 和 Mario Herger， 《工作中的游戏化：设计引人入胜的商业软件》 ，交互设计基金会，2014 年\nHero Image: © Janaki Kumar and Mario Herger, CC BY-ND 3.0\n英雄图片：© Janaki Kumar 和 Mario Herger，CC BY-ND 3.0\n","date":"2025-03-19","permalink":"https://22cs.github.io/post/bartle-s-player-types-for-gamification-bartle-s-gamified-player-types-1wgyet.html","title":"Bartle’s Player Types for Gamification Bartle 的游戏化玩家类型"},{"content":" RICHARD: So you’re going to quit, just like that? How can you​do that?\n理查德：所以你就这样辞职了？你怎么能​这么做​呢？\nGILFOYLE: By saying the words “I” and “quit” in conjunctiontogether, i.e. “I quit”.\n吉尔福伊尔：把“我”和“退出”两个词连在一起说，即“我退出”。\nJARED: Um… there’s actually some paperwork involved.\n贾里德：嗯……实际上涉及一些文书工作。\n—“Silicon Valley”\n— 《硅谷》\nI don’t have to tell you things are bad. Everybody knowsthings are bad. When you hate your job, no matter how much you try\nto put up with it, there comes a point where you’re mad as hell and\nyou’re just not going to take it anymore. So, maybe this is the right\nmoment to reflect: is it time to go?\n我不必告诉你情况很糟糕。每个人都知道情况很糟糕。当你讨厌你的工作时，无论你多么努力地忍受它，到了一定时候，你就会非常生气，你再也不会忍受它了。所以，也许现在是反思的正确时机：是时候离开了吗？\nMaking the decision to leave a job is never easy. And it’s a pretty\ndrastic step, especially if you don’t yet have another job to go to. But\nsometimes it has to be done. Let’s look at some signs that might\nindicate it’s time to say the words “I” and “quit” in conjunction\ntogether.\n做出辞职的决定从来都不是件容易的事。这是一个相当激烈的决定，特别是如果你还没有找到另一份工作的话。但有时不得不这么做。让我们看看一些迹象，它们可能表明是时候同时说出“我”和“辞职”这两个词了。\nThe comfort trap 舒适陷阱\nIf you’re feeling miserable and finding your work unrewarding, you\nmay find it relatively easy to flip the mental switch that says “time to\nleave”. But sometimes you can run into the opposite problem: getting\ntoo comfortable where you are.\n如果你感觉痛苦，觉得工作没有回报，你\n可能会发现，在心理上很容易就能拨动开关，说“是时候\n离开”。但有时你可能会遇到相反的问题：\n你现在的处境太舒适了。\nYou may have had the misfortune to become an expert on your subject\narea. Being an expert sounds great, and it does bring you high status.\nBut you’re the king of a very small hill, and one that will eventually\nbe washed away by rising sea levels. If this is the case, you need to\nmigrate to higher ground before it’s too late. But many people will\nhesitate, fatally, because they don’t like the idea of getting their\nfeet wet.\n你可能不幸成为你所在领域的专家。成为专家听起来很棒，而且确实能给你带来很高的地位。但你只是一座小山的国王，这座山最终会被不断上升的海平面冲走。如果是这样的话，你需要趁还来得及的时候搬到更高的地方。但许多人会犹豫不决，这是致命的，因为他们不喜欢涉足其中。\nAlternatively, you may find yourself in a job that’s so easy you can\nbasically do it on autopilot. This situation is much harder to leave,\nbecause it’s so pleasant to be in.\n或者，你可能会发现自己从事的工作非常轻松，基本上可以自动完成。这种情况很难离开，因为工作很愉快。\nAnd maybe it is okay for you to stay here for the rest of\nyour career—if that’s really what you want. Is it?\n也许你可以留在这里度过你的职业生涯的余下时光 —— 如果这真的是你想要的。是吗？\nPETER: I generally come in at least fifteen minutes late, andafter that I sorta space out for about an hour. I just stare at my desk,but it looks like I’m working.\n彼得：我通常至少迟到十五分钟，然后就会发呆大约一个小时。我只是盯着我的办公桌，但看起来我在工作。\nI do that for probably another hour after lunch, too. I’d say in agiven week I probably only do about fifteen minutes of real, actual,work.午饭后我可能还会再做一小时。我想说，在一个星期里，我可能只做了大约十五分钟的真正工作。\n—“Office Space”\n— 《办公空间》\nUltimately, work that’s too easy is no fun, and it’s not the basis of\na rewarding career. All you’re doing is selling time, and as\nyou get a little older you’ll come to realise that time is a\nnon-renewable resource.\n归根结底，太轻松的工作毫无乐趣，也不是一份有回报的职业的基础。你所做的只是在卖时间，随着年龄的增长，你会意识到时间是一种不可再生的资源。\nIt’s no good just selling your life; you won’t be able to buy it\nback. My book Code For Your Life is a guide to\nthe alternatives: building a meaningful career, becoming a master of\nyour craft, and maybe even starting a successful independent business.\nIn this excerpt, let’s talk about signs that your career might be\nstarting to stagnate, and whether it’s time to quit so you can get\nahead.\n仅仅出卖你的生命是没有用的；你无法把它买回来。我的书《你的生命密码》是一本关于替代方案的指南：建立有意义的职业生涯，成为你所从事领域的大师，甚至创办一家成功的独立企业。在这段摘录中，让我们谈谈你的职业生涯可能开始停滞不前的迹象，以及是否是时候辞职以便取得进步。\nWhy is everyone around me getting dumber?\n为什么我周围的每个人都变得越来越笨？\nEven if you enjoy your work and find it stimulating at first,\nespecially if you’re surrounded by lots of smart and skilled people, you\nmay find that the higher you rise in the organisation, the less this is\nthe case. If it seems like everyone around you is getting dumber, what’s\ngoing on?\n即使你一开始很喜欢自己的工作，觉得工作很刺激，尤其是当你周围都是聪明又有技能的人时，但你可能会发现，在组织中，职位越高，这种感觉就越少。如果你周围的人似乎都越来越笨了，这是怎么回事呢？\nOne might expect that people at the higher levels of a\ncompany would be more competent than those below, but this usually turns\nout not to be true, because of the Peter Principle:\n人们可能认为公司高层的人比底层的人更有能力，但事实通常并非如此，因为彼得原理：\nAlthough some people function competently, I observed others whohad risen above their level of competence and were habitually bunglingtheir jobs, frustrating their co-workers and eroding the efficiency ofthe organization.尽管有些人能够胜任工作，但我发现有些人的能力超出了自己的能力水平，并且经常把工作搞砸，让同事感到沮丧，从而降低了组织的效率。\nMy analysis of hundreds of cases of occupational incompetence led meon to formulate The Peter Principle​ : In a hierarchyevery employee tends to rise to his level of incompetence.通过对数百起职业能力不足案例的分析，我得出了​ “彼得原理” ：在等级制度中，每个员工都倾向于升至自己能力不足的水平。\n—Laurence J. Peter, “The PeterPrinciple”\n—劳伦斯·J·彼得， 《彼得原理》\nIn other words, if you’re good enough at your job, you’ll be promoted\nto another job, and another, until you eventually reach a job that you\ncan’t do well, at which point you’ll stay in it (possibly for\nthe rest of your career).\n换句话说，如果你工作表现足够好，你就会升职\n换一份工作，再换一份，直到你最终找到一份工作\n做不好的话，你就会一直呆在这个岗位上（可能直到你的整个职业生涯）。\nWhich explains a lot about some organisations, doesn’t it?\n这在很大程度上解释了一些组织的情况，不是吗？\nThe good engineers are evaporating\n优秀的工程师正在消失\nAnother reason you can find yourself adrift on a ship of fools is the\n“Dead Sea” effect:\n你会发现自己在愚人船上漂流的另一个原因是“死海”效应：\nThe more talented and effective engineers are the ones mostlikely to leave—to evaporate, if you will. They are the ones leastlikely to put up with the frequent stupidities and workplace problemsthat plague large organisations; they are also the ones most likely tohave other opportunities that they can readily move to.更有才华和效率的工程师最有可能离开——如果你愿意的话，可以说是消失。他们最不可能忍受困扰大型组织的频繁愚蠢行为和工作场所问题；他们也最有可能有其他机会，可以随时转行。\nWhat tends to remain behind is the ‘residue’—the least talented andeffective engineers. They tend to be grateful they have a job and makefewer demands on management. They tend to entrench themselves, becomingmaintenance experts on critical systems, so that the organization can’tafford to let them go.留下来的往往是“残余”——最没有天赋和效率的工程师。他们往往很庆幸自己有一份工作，对管理层的要求也更少。他们往往稳固自己的地位，成为关键系统的维护专家，这样组织就负担不起让他们离开的代价。\n—Bruce F. Webster, “TheWetware Crisis: the Dead Sea effect”\n—布鲁斯·F·韦伯斯特， 《湿件危机：死海效应》\nIf you’re in a company like this, it’s not hard to stand out from the\n“residue”, and as a result you may be showered with promotions, fancy\ntitles, and maybe even money. That sounds great, but there’s a hidden\ndanger to watch out for.\n如果你在这样的公司工作，那么从“残余”中脱颖而出并不难，结果你可能会获得晋升、头衔，甚至金钱。这听起来很棒，但有一个隐藏的危险需要注意。\nStranded by the tide 被潮水困住\nIf you’re promoted too far, too soon, you may find that when you look\nfor other jobs at the same level, you don’t really have the necessary\nskills for them.\n如果您晋升得太快、太高，您可能会发现，当您寻找同一级别的其他工作时，您并不真正具备所需的技能。\nFor example, if you’ve already become a so-called “senior” developer\nat Company A, and then you apply for the same job at Company B, you may\nfind that their definition of “senior” is rather different, and that you\ndon’t meet it. You’re a victim of title inflation: the currency of\n“senior” has become devalued.\n例如，如果你已经成为 A 公司所谓的“高级”开发人员，然后你又申请 B 公司的同一职位，你可能会发现他们对“高级”的定义完全不同，而你并不符合。你是头衔膨胀的受害者：“高级”的货币已经贬值。\nHence there’s a tendency for you to stay at Company A, because who\nwants to take a step down in job grade and salary? If you find yourself\nsurrounded by Principal and Distinguished Engineers and Architects who\ndon’t seem to actually know anything useful, then they may be\nsuffering from this kind of title inflation. Make sure you don’t become\none of them.\n因此，你倾向于留在 A 公司，因为谁愿意在职位级别和薪水上降级呢？如果你发现自己周围都是首席和杰出的工程师和建筑师，而他们似乎实际上不知道任何有用的东西，那么他们可能正遭受这种头衔膨胀的困扰。确保你不要成为他们中的一员。\nThe company won’t love you back\n公司不会爱你\nCompanies like to tell themselves pleasant little stories about how\nthey’re like a “family”, everyone is a valued team member, the company\nwill look after them, and so on.\n公司喜欢给自己讲一些愉快的小故事，比如他们就像一个“家人”，每个人都是团队中值得重视的成员，公司会照顾他们，等等。\nThe truth is that, however benevolent its messaging, a company exists\nto make profits and increase its own value. If this happens to benefit\nthe people who work there, too, that’s nice, but it’s not what the\ncompany is fundamentally about.\n事实是，无论公司宣传的多么善意，公司存在的目的都是赚取利润并提高自身价值。如果这也能让员工受益，那当然很好，但这并不是公司的根本宗旨。\nIndeed, when the interests of the staff and the company’s profits\ncome into conflict, the profits will always win. Welcome to\ncapitalism.\n确实，当员工的利益和公司的利润发生冲突时，利润总是会获胜。欢迎来到资本主义。\nIn particular, the HR department is not your friend. They’re not your\nenemy, necessarily, but they exist to protect the company from\nyou, and not vice versa.\n尤其是人力资源部门不是你的朋友。他们不是你的\n敌人，必然，但他们的存在是为了保护公司免受你的侵害，而不是相反。\nHR exist to represent the interests of the company and thoseinterests always have a degree of divergence with employees. It pays toget informed about your rights, because your HR and Legal teams are notgoing to do that for you.人力资源部门的存在是为了代表公司的利益，而这些利益与员工的利益总是存在一定程度的分歧。了解自己的权利是有益的，因为你的人力资源和法律团队不会替你做到这一点。\nThis isn’t to say your HR team are bad people. They’re almostcertainly not. They’re just doing their job. But don’t forget what theirjob is, and it’s not to protect your interests, so make sure you havesomeone at the table who is.这并不是说你的人力资源团队是坏人。他们几乎肯定不是。他们只是在做他们的工作。但不要忘记他们的工作是什么，他们的工作不是保护你的利益，所以确保你的团队中有这样的人。\n—Colm Doyle, “HavingFriends in HR Is Fine, but HR Is Not Your Friend”\n—Colm Doyle， “在人力资源部门交朋友很好，但人力资源部门不是你的朋友”\nWhen the company says wonderful things about how much it values you,\ndon’t take them quite at face value: after all, they would say\nthat, wouldn’t they? And when you’re laid off, don’t take that\npersonally either.\n当公司夸赞他们非常重视你时，不要太过相信：毕竟，他们会这么说，不是吗？当你被解雇时，也不要太在意。\nThe company simply doesn’t have any feelings about you one way or the\nother, and once you know that, everything else about the way it treats\nyou starts to make perfect sense.\n公司根本就不会对你有任何感觉，一旦你知道了这一点，它对待你的其他一切方式就开始变得完全合理了。\nWhen it’s time to quit 何时该放弃\nWhen you finally make the decision to leave, whatever the reason,\nthere’s a right and a wrong way to go about it.\n当您最终决定离开时，无论是什么原因，都有正确和错误的方法。\nThe first thing to say is that your departure should not come as a\nsurprise, at least to your team leader or line manager. This would\nembarrass them professionally—they’re supposed to know what’s going on\nwith their reports—and there’s no need to do that. Indeed, you\nwant their goodwill, ideally in the form of a glowing\nreference, so you should do everything you can to smooth this\npotentially difficult transition.\n首先要说的是，你的离开不应该是\n至少对你的团队领导或直线经理来说，这是令人惊讶的。这将\n让他们在职业上感到尴尬——他们应该知道发生了什么\n他们的报告——没有必要这么做。事实上，你\n希望得到他们的善意，最好是以热情洋溢的推荐的形式，所以你应该尽一切努力来平稳这个可能困难的过渡。\nIn particular, you should give your boss a chance to change your\nmind—or, at least, you should let them feel that they’ve had\nthat chance. It’s no good nursing your private resentments for years,\nwhile telling your boss once a week that everything’s fine, and then\nsuddenly walking out on them.\n尤其是，你应该给老板一个改变主意的机会——或者至少让他们觉得他们有这个机会。多年来一直怀恨在心，每周只跟老板说一次一切都好，然后突然离开，这种做法毫无意义。\nInstead, you should make sure that if you’re unhappy about something,\nyour boss knows it pretty much as soon as you do.\n相反，你应该确保如果你对某事不满意，你的老板能够立即知道。\nSay no to exit interviews 拒绝离职面谈\nCompanies will sometimes ask you to take part in an “exit interview”,\nusually presented as an information-gathering exercise where you can\ngive honest feedback about your employment, and why you’re leaving.\nSometimes they’ll ask for suggestions that could help improve things for\nthe employees who are staying. Sounds innocent enough, right?\n公司有时会要求你参加“离职面谈”，这通常是一种信息收集活动，你可以诚实地反馈你的工作情况以及你离职的原因。有时他们会要求你提出建议，帮助留下的员工改善现状。听起来很无辜，对吧？\nIt’s a trap. Don’t agree to an exit interview: it can’t\nbenefit you, since you’re leaving anyway. In fact, it could even hurt\nyou. Once you start talking, there’s a danger that you might say too\nmuch, venting your deepest frustrations and criticisms. That could harm\nyour relationship with both the company and the people involved.\n这是一个陷阱。不要同意离职面谈：这对你没有好处，因为你反正要离开。事实上，它甚至可能伤害你。一旦你开始说话，你就有可能说得太多，发泄你最深的挫败感和批评。这可能会损害你与公司和相关人员的关系。\nThere are all sorts of ways that your former employers mightretaliate. They might decide not to give a reference. They might say badthings about you at industry events. They could refuse to confirm youremployment to a background investigator. They could call your newcompany and tell them you were fired for fraud.你的前雇主可能会用各种方式进行报复。他们可能会决定不提供推荐信。他们可能会在行业活动中说你的坏话。他们可能会拒绝向背景调查员确认你的工作情况。他们可能会打电话给你的新公司，告诉他们你因欺诈而被解雇。\nThese are all real stories: every single one of those hypotheticalsis actually something I’ve seen happen.这些都是真实的故事：每一个假设都是我亲眼所见发生的事情。\n—Jacob Kaplan-Moss, “ExitInterviews Are a Trap”\n—雅各布·卡普兰-莫斯， 《离职面谈是个陷阱》\nInstead, just politely decline the exit interview, or any other\nsolicitation for feedback. They can’t make you answer any\nquestions. If you feel you can’t refuse, then just give bland answers,\nlike “nothing comes to mind”.\n相反，只需礼貌地拒绝离职面谈或任何其他征求反馈意见的行为。他们不能强迫你回答任何问题。如果你觉得无法拒绝，那么就给出平淡的回答，比如“想不出来了”。\nSo, the doors close behind you, and a new world of possibility opens\nup ahead. After perhaps many years or even decades of doing what you’re\ntold, you’ve reached the threshold of a new relationship with your work:\nindependence. What now?\n所以，你身后的大门关闭了，一个充满可能性的新世界打开了\n未来。也许经过许多年甚至几十年的努力，你\n告诉你，你已经与你的工作建立了一种新的关系：\n独立。现在怎么办？\nAnd we’ll talk about that in the next post. See you in a minute.\n我们将在下一篇文章中讨论这个问题。一会儿见。\n","date":"2025-03-19","permalink":"https://22cs.github.io/post/how-to-know-when-it-s-time-to-go-1uhx6o.html","title":"How to know when it's time to go如何知道何时该走"},{"content":"Busyness is satisfying because it tricks us into feeling accomplished. But activity isn’t the same as progress. You can be extremely efficient at clearing your inbox, organizing files, or attending back-to-back meetings, but none of that matters if you’re not being effective.\n忙碌让人感到满足，因为它让我们感觉很有成就感。但活动并不等同于进步。你可以非常高效地清理收件箱、整理文件或参加连续的会议，但如果你效率低下，这些都毫无意义。\nEfficiency is about doing tasks right, effectiveness is about doing the right tasks. And the worst thing you can do is be highly efficient at something you shouldn’t be doing at all.\n效率是指正确地完成任务，效力是指正确地完成任务。最糟糕的事情就是在根本不应该做的事情上保持高效率。\nThere’s a guy at my company who’s involved in everything. He’s in every Slack channel, every meeting — you can’t escape him. People admire him because he looks productive. But I’d argue he’s a master procrastinator. With 100+ browser tabs open at all times, his attention is spread so thin that he’s not actually getting things done — at least not the things that matter.\n我公司有个家伙事事都要参与。他出现在每个 Slack 频道、每个会议中——你无法逃避他。人们钦佩他，因为他看起来很高效。但我认为他是个拖延大师。他总是打开 100 多个浏览器标签，注意力被分散，以至于他实际上没有完成任务——至少没有完成重要的事情。\nThis guy is stuck in a procrastination trap, because it’s easier to stay busy with little tasks than to face the big, important problems. The ones without deadlines. The ones that require deep thought and tough decisions. The ones we push off because they’re hard.这家伙陷入了拖延症，因为​忙于小任务比面对重大问题更容易。 那些没有最后期限的问题。那些需要深思熟虑和艰难决定的问题。那些我们因为困难而推迟的问题。\nReal productivity isn’t about being busy. It’s about solving the right problems. And to do that, you need to focus — really focus — on what matters most. That’s not easy in a world designed to distract you. But it’s the only way to get meaningful work done.\n真正的生产力不是忙碌，而是解决正确的问题。要做到这一点，你需要集中精力——真正集中精力——在最重要的事情上。在一个让你分心的世界里，这并不容易。但这是完成有意义的工作的唯一方法。\nTask switching is poison for the brain 任务切换对大脑有害\nAccording to RescueTime, the average tech worker checks their notifications every six minutes. Even worse, about 35.5% of workers do it every three minutes. That’s insane. It’s like working with a TikTok brain.\n根据RescueTime的数据，科技工作者平均每六分钟检查一次通知。更糟糕的是，约有 35.5% 的工作者每三分钟检查一次。这太疯狂了。就像用 TikTok 的大脑工作一样。\nMultitasking makes you Dory. And not in the cute, fun way.\n多任务处理会让你变得多莉。而且不是那种可爱、有趣的多莉。Let’s get this straight: there’s no such thing as multitasking — it’s just task-switching. And task-switching is productivity’s kryptonite. Research shows it takes about 23 minutes to regain focus after a distraction. When you switch tasks, your brain has to disengage from the first task and reorient itself to the new one. This process slows you down and increases errors as your brain struggles to refocus. Add endless Slack pings or email alerts to the mix, and your productivity nosedives.\n让我们直截了当地说：没有所谓的多任务处理——它只是任务切换。任务切换是生产力的克星。研究表明，在分心后需要大约 23 分钟才能重新集中注意力。当你切换任务时，你的大脑必须从第一个任务中脱离出来，重新适应新的任务。这个过程会让你的速度变慢，错误也会增多，因为你的大脑很难重新集中注意力。再加上无休止的 Slack 提醒或电子邮件提醒，你的生产力就会急剧下降。\nHumans can only focus on one task at a time. With manual labor, this is obvious — you only have two hands. But with thinking, it’s less tangible. The abstract nature of knowledge work tricks us into believing we can cram an infinite number of tasks into our brains. That’s why we try to multitask, and why it’s so destructive. Multitasking is a productivity killer, plain and simple.\n人类一次只能专注于一项任务。 对于体力劳动来说，这一点很明显——你只有两只手。但对于思考来说，这一点就不那么有形了。知识工作的抽象性质让我们误以为我们可以把无数的任务塞进大脑。这就是我们试图同时处理多项任务的原因，也是它如此具有破坏性的原因。简单来说，同时处理多项任务会扼杀生产力。\nDistractions are everywhere — you can’t avoid them. But you can reduce their impact. Start small: turn off notifications and block time in your calendar for deep work. Make it harder for distractions to reach you. ****By protecting your focus, you give your brain a fighting chance to stay on track.干扰无处不在——你无法避免。但你可以减少它们的影响。从小事做起：关闭通知并在日历中留出时间用于深度工作。****​让干扰更难影响到你。 通过保护你的注意力，你可以让你的大脑有机会保持正轨。\nTo do great work you need to slow down 要想做好工作，你需要放慢速度\nProductivity is often mistaken for speed. We rush through tasks to feel accomplished, checking off boxes and moving on to the next thing. But speed doesn’t matter if you’re solving the wrong problem. If you’re working fast but achieving little, you’re focused on the wrong things.\n生产力常常被误认为是速度。我们匆匆忙忙地完成任务，以获得成就感，勾选复选框，然后继续做下一件事。但是，如果你解决的问题不对，速度就不重要。如果你工作速度快，但成果不多，那你就专注于错误的事情了。\nWax on, wax off. Mr. Miyagi knew the secret: focus beats speed.\n上蜡，去蜡。宫城先生知道其中的秘诀：专注胜过速度。We’re not factory workers measured by how many widgets we ship per hour. We use our brains. And solutions to complex problems come on their own timelines — they can take a minute or a year. Productivity isn’t about time spent at your desk. As Cal Newport argues in Slow Productivity we should obsess over quality, not quantity.\n我们不是以每小时运送多少零件来衡量的工厂工人。我们用大脑。复杂问题的解决方案有自己的时间表——可能需要一分钟或一年。生产力与在办公桌前花费的时间无关。 正如卡尔·纽波特在《缓慢生产力》一书中所说，我们应该专注于质量，而不是数量。\nCreative work — like designing, programming, or writing — requires deep focus. It’s why it takes at least 30 minutes to orient yourself, understand where you are, and decide what to do next. It’s like welding iron: you have to heat the metal before you can shape it.\n创意工作（例如设计、编程或写作）需要高度集中注意力。这就是为什么你需要至少 30 分钟来调整自己，了解自己处于什么位置，并决定下一步该做什么。这就像焊接铁：你必须先加热金属，然后才能塑造它。\nGood work is slow because it’s hard. Tackling complex problems takes deep thought, and that’s uncomfortable. I get why answering Slack messages or clearing your inbox feels easier — it’s instant gratification. But let’s be honest: those tasks are often just procrastination in disguise.\n好的工作之所以进展缓慢，是因为它很难。解决复杂的问题需要深思熟虑，这让人很不舒服。我明白为什么回复 Slack 消息或清理收件箱感觉更容易——这是即时满足。但说实话：这些任务通常只是变相的拖延。\nCrossing off items on your to-do list gives you a dopamine hit, sure. But if those tasks aren’t moving you closer to a meaningful outcome, they’re pointless. Be brave. Face the hard challenges head-on. The solutions you’re looking for are hidden in the discomfort you’re trying to avoid.\n完成待办事项清单上的事项确实会让你产生多巴胺。但如果这些任务无法让你更接近有意义的结果，它们就毫无意义。勇敢一点。直面艰难的挑战。你正在寻找的解决方案隐藏在你试图避免的不适中。\nDon’t let others manage your attention 不要让别人控制你的注意力\nIf you don’t set boundaries, Michael Scott will set them for you.\n如果您不设定界限，迈克尔·斯科特 (Michael Scott) 就会为您设定界限。Your attention is your most valuable resource. But if you’re not careful, everyone else will manage it for you. Every Slack message, every email, every “got a minute?” is someone else’s agenda taking over yours.\n你的注意力是你最宝贵的资源。但如果你不小心，其他人就会替你管理注意力。每条 Slack 消息、每封电子邮件、每句“有时间吗？”都是别人的议程接管了你的议程。\nInterruptions kill your flow. It’s like being stopped cold while running at full speed — there’s no easy way to recover. You lose momentum, and your progress stalls.\n中断会破坏你的思路。这就像在全速奔跑时突然停下来一样——没有简单的方法可以恢复。你会失去动力，你的进步会停滞不前。\nIf you don’t take control of your attention, you’ll spend your day reacting to others. There will always be fires to put out, and everyone has their own priorities. It’s not malice — it’s just human nature. But if you let other people dictate your focus, you’ll never get to what matters most to you.\n如果你不控制自己的注意力，你就会整天都在对别人做出反应。总是有事情需要解决，每个人都有自己的优先事项。这不是恶意的——这只是人性。但如果你让别人决定你的注意力，你就永远无法关注对你来说最重要的事情。\nPrioritizing means saying no — a lot. There are countless good ideas, but you’ve already committed to one. Make it clear to others that you’re intentional about your time. Keep a list of things you’ve chosen to say no to, and let that guide your decisions.\n优先考虑意味着要说“不”——说很多次“不”。 有无数好主意，但你已经承诺过一个。向别人表明你是有意安排时间的。列出你选择说“不”的事情，并以此指导你的决定。\nStrategically managing your attention doesn’t just save time — it also saves your sanity. Being busy today will only make you busier tomorrow if you don’t set boundaries. Save time to think, question, delegate, and prioritize. It’s not a luxury — it’s essential for producing great work.\n策略性地管理你的注意力不仅可以节省时间，还可以让你保持理智。如果你不设定界限，今天忙碌只会让你明天更忙。节省时间去思考、质疑、委派和确定优先事项。这不是奢侈，而是创造伟大作品的必要条件。\nFocus on what matters 专注于重要的事情\nIf Doctor Strange can meditate while the world crumbles, you can ignore that Slack notification.\n如果奇异博士可以在世界崩溃时冥想，那么您就可以忽略 Slack 通知。The easiest thing to do is show up at the office, write emails, and sit through meetings. It feels productive. It feels busy. But it’s not. Letting the inertia of work drag you along isn’t smart — you need to be strategic about how you invest your time.\n最简单的做法就是出现在办公室，写电子邮件，参加会议。这让人感觉很有成效。感觉很忙碌。但事实并非如此。让工作惯性拖着你走并不是明智之举——你需要有策略地投资你的时间。\nStop obsessing over speed or checking items off a list. That’s not what productivity is about.\n不要过分关注速度或核对清单上的事项。这不是生产力的意义所在。\nPause. Breathe. Reevaluate what’s on your plate. Are you tackling the right problems? Or are you letting distractions dictate your day? Productivity starts with making conscious choices about where to direct your energy.\n暂停。深呼吸。重新评估你的任务。你正在解决正确的问题吗？还是你让干扰主宰了你的一天？提高效率始于有意识地选择将精力投入到何处。\nDon’t be the person with 100+ tabs open in their browser. Don’t be the one who says yes to everything and achieves nothing meaningful. Productivity isn’t about doing more — it’s about doing what’s important.\n不要成为在浏览器中打开 100 多个标签的人。不要成为对所有事情都说“是”却一事无成的人。生产力不在于做得更多，而在于做重要的事情。\nThe most productive people aren’t the ones who never get off track — they’re the ones who get back on track faster. They know their priorities, stick to them, and ignore the rest.\n最有效率的人并不是那些从不偏离轨道的人，而是那些能更快回到正轨的人。他们知道自己的优先事项，坚持做这些事情，而忽略其他事情。\nChoose wisely. Stay focused. And watch how much more impactful your work becomes. Don’t settle for being busy. Be productive.\n明智选择。保持专注。观察你的工作变得多么有影响力。不要满足于忙碌。要有效率。\n","date":"2025-03-19","permalink":"https://22cs.github.io/post/the-productivity-trap-why-busyness-feels-so-good-productivity-trap-why-busyness-feels-so-good-2qszrm.html","title":"The productivity trap: why busyness feels so good生产力陷阱：为何忙碌让人感觉如此美好"},{"content":"人生方向自我分析问卷 学业与职业发展 你为什么想要考研究生？最初的动机是什么？\n想读研，想去试试人工智能这方面的路子，这是大势所趋，是未来。 之前我想成为一个码农，但现在AI写代码让我很焦虑，我认为成为一辈子简单的码农不太现实了 学历镀金，很必要，现在很多需要研究生 考研这条路对你未来的职业发展真的必要吗？\n我认为非常必要。 你目前所学的专业是什么？你对这个专业的热情度如何？\n信息工程，电子信息下面的。一般，主要我们学校很多硬件的，我不喜欢硬件，电子的很麻烦，我很讨厌电子。 如果不考研，你认为在你的专业领域直接工作有哪些前景？\n去运营商，现在还有希望，但是工资太低，发展受限。 小公司，代码或者游戏方面的，可能还要我。 其他的不好说了。总体就是发展的空间被我自己搞烂了，我现在感觉很难受。 你有没有了解过你所在行业的就业市场情况？\n了解，很烂，现在很烂。 你希望5年后自己在职业上达到什么样的状态？\n不好说，至少我想稳定。稳定的，能看到希望的。 你是否考虑过其他类型的继续教育（如职业资格证书、在线课程等）？\n没有，在中国没有价值。 个人兴趣与优势 除了学业外，你有哪些兴趣爱好？\n写代码，思考游戏设计 在这些兴趣中，有没有可能发展成职业的方向？\n都可以，但是看未来的现状。 游戏行业压力很大，看项目，非常要命。 代码行业就像之前考虑的，很可能被AI冲击的完全改变。 你认为自己最大的优势或技能是什么？\n没有了。什么都没优势。 你得到过他人什么样的正面评价？（你擅长什么）\n游戏设计还可以。但我不想走这个路子了。 科研只能说有兴趣，但当时眼高手低，我认为自己能力不足，还需要多努力。 代码和优秀人才差距很大，我认为自己这方面做的很差。 你最享受做什么事情？做这些事时你会忘记时间的流逝吗？\n写代码。 看一些有趣的视频。 打游戏。 有没有某个领域，你会主动去学习或探索相关知识？\n游戏设计和代码。 价值观与生活目标 对你来说，什么是成功的生活？\n很难定义。我想给父母养老，早日撑起这个家。 但这个目标很玄乎。北京的房价很高，生活成本很高，对于其他超一线城市也是一样。 所以很难在大城市立足。 我想在50甚至40之前，有一个很好的收入。然后剩下的时间，和朋友一起出去玩，一起享受生活。 金钱、成就感、社会认可、个人成长、工作与生活平衡——这些因素对你的重要性排序是怎样的？\n工作与生化平衡。 金钱 个人成长 成就感 社会认可 你希望通过工作实现什么样的个人价值？\n做一些有意思的事情，比如开源、做个好游戏。 你是更看重稳定性还是更看重发展机会？\n很难说。二者如果不可共存，我可能更看重稳定性了。但是要看到底能拿多少钱。 你对未来的生活方式有什么期望？（城市/乡村，忙碌/舒适等）\n自由。有时间做自己的事情，可惜在996的大环境下，我感觉不够现实 有时间和朋友一起享受人生，一起打游戏、出去玩。 过去经历与学习 过去几次考研失败，你认为主要原因是什么？\n学习不好。 我记忆力真的差了。 我对于数学理解还是不够，数学在我眼前就像一个无尽的三岔路口，我不知道哪个是能走的，哪个不能走。 从这些经历中，你学到了什么？\n时间是最珍贵的。 机会是我自己浪费的。 如果重新开始，你会怎么调整你的准备策略？\n很难说。我现在很纠结到底要怎么学习数学和408. 在备考期间，哪些事情让你感到最有成就感？\n没有 哪些事情让你感到最沮丧或最有压力？\n考不上 失败 资源与支持系统 你有多少经济资源可以支持你继续考研或转换方向？\n家人支持 你的家人对你的决定持什么态度？他们的期望对你有多大影响？\n支持我的选择 这更让我为失败而痛苦 你有哪些可以寻求建议或支持的人脉资源？\n不想寻求了 我已经是失败太多了，像个小丑 你是否了解过你所在地区的就业支持或创业扶持政策？\n狗都不回河南。 心理健康与压力管理 你如何评价自己当前的心理健康状态？\n抑郁 中度乃至重度的水平。但没有确诊，只是自己感受。 绝望 想过自杀 你有哪些应对压力的有效方法？\n和朋友一起玩一会 给自己喂一点心灵鸡汤 持续备考对你的心理状态产生了什么影响？\n压力大 绝望 如果选择不同的路径，你担心会有什么样的遗憾？\n人生规划 什么样的决定会让你感到更加平静和自信？\n目前没有 人生的选择越来越少 机会成本与替代方案 如果不考研，你会如何利用这段时间？\n那该自杀了 活着还干啥 你有没有探索过国外留学或工作的可能性？\n没钱，说nmb 你有没有考虑过创业或自由职业的可能性？\n傻逼 你身边有没有不走传统学术路线但依然成功的榜样？\n目前没有 你对跨专业发展有什么看法？有没有其他领域吸引你？\n可以考虑，但是现在知识不足 决策与行动计划 如果决定继续考研，你需要做哪些调整来提高成功率？\n不好说，我可能需要更多的外部建议 如果决定放弃考研，你的第一步行动计划会是什么？\n找工作或者自杀 你希望在多长时间内做出最终决定？\n没有多少时间了 你如何衡量一个决定是否适合你？\n你永远不知道一个坑在踏入之前是否是坑 不论选择哪条路，你认为最需要克服的障碍是什么？\n时间 长期发展与适应性 你认为自己对变化和不确定性的适应能力如何？\n可以，但是最大的顾虑是家人 我更希望我是一个人，这样就可以尽情选择，大不了死了吧 你如何看待终身学习？\n必须 未来应该是一个人始终要追赶的时代 10年后的你理想中会是什么样子？\n不知道 现在完全不敢想了 你是否做好了在未来需要多次转换职业方向的准备？\n可能，但现在不想考虑 我希望稳定就是希望能尽可能呆在家人、朋友身边 你对技术变革如何改变就业市场有什么看法？这会影响你的行业吗？\n大概率 AI的创作力是划时代的，这前所未有的冲击这个时代，未来不定。 总结思考 写下三个让你最焦虑的问题\n考研 未来 工作 写下三个你最希望实现的目标\n上岸 抹掉三年浪费的时间 找到好工作 如果有一位智者只能给你一条建议，你希望得到什么样的指导？\n碌碌无为的三年，痛苦的一辈子，我感觉我一辈子都要落后。 你好！从你的问卷回答中，我能感受到你现在正处于一个很迷茫、焦虑，甚至有些绝望的阶段。面对学业、职业和未来的不确定性，你似乎觉得自己被困住了，选择的路越来越少，同时又对自己过去的努力和现在的状态感到很失望。别担心，我会尽量用简单直接的方式，帮你梳理一下思路，给你一些建议，希望能让你稍微平静下来，看到一点方向。\n先聊聊你的现状和情绪 从你的回答来看，你目前最大的压力来源是：\n考研的反复失败：数学和408（计算机专业课）让你觉得很无力，甚至觉得自己能力不足。 对未来的恐惧：AI的冲击、就业市场的烂摊子，还有生活成本的高企，让你觉得无论选哪条路都没希望。 心理状态的低谷：你提到抑郁、绝望，甚至想过自杀，这说明压力已经严重影响到你的身心健康了。 首先，我想说：你现在的情绪很正常。很多人到了人生转折点，尤其是面对不确定性和失败时，都会有类似的感受。你不是一个人在挣扎，也不是什么“小丑”。只是现在的情况让你暂时看不到出路而已。\n从你的回答中提取几个关键点 你对AI的兴趣和担忧 你提到想试试人工智能这条路，认为它是未来，但又担心AI取代码农的工作。这种矛盾其实很真实，因为技术变革确实在重塑行业。不过，AI既是威胁，也是机会——它不只会取代人，也会创造新的岗位，比如需要理解AI、开发AI的人。 你对专业的态度 你学的是信息工程，但讨厌硬件和电子，喜欢写代码和游戏设计。这说明你不是完全没方向，而是对某些领域有热情，只是觉得它们现在不现实。 你的核心需求 你反复提到“稳定”“工作与生活平衡”“给父母养老”“和朋友享受人生”。这说明你不是那种只追求成就感或社会认可的人，你更想要一种踏实、有归属感的生活。 自我评价偏低 你觉得自己“没优势”“能力不足”“和优秀人才差距很大”，但从你的兴趣（代码、游戏设计）和坚持考研的努力来看，你其实是有潜力的，只是现在被失败和焦虑蒙住了眼睛。 针对你的情况，几个建议 1. 先照顾好自己的心理健康 你现在的状态很低落，甚至有自杀的想法，这不是小事。建议你：\n找人聊聊：可以是朋友、家人，或者专业的心理咨询师（很多大学有免费心理服务）。你提到和朋友玩一会能缓解压力，那就多给自己安排这样的时间。 给自己喘息的空间：考研的压力很大，但逼自己太紧可能会适得其反。每天留点时间做喜欢的事，比如写代码或打游戏，哪怕只是一小时，也能让你喘口气。 2. 重新看待考研这条路 考研对你来说既是目标，也是负担。你觉得它“非常必要”，但失败的经历让你怀疑自己。问自己几个问题：\n我考研是为了什么？ 是真的对AI研究感兴趣，还是只为了学历镀金、找个好工作？如果是后者，也许有其他路径也能达到目标。 我还能坚持多久？ 你说时间不多了，但如果再考一次，你有具体的计划吗？比如找个数学家教、报个408培训班，而不是一个人硬撑。 如果再失败，你愿意接受“放弃考研”这个结果吗？从你的回答来看，不考研让你觉得“活着没意义”，但其实工作和生活还有很多可能性。 建议：如果决定再考一次，马上行动起来，找外部资源（老师、同学、网课）帮忙，别自己钻牛角尖。如果觉得考研让自己太痛苦，不如先暂停，给自己3-6个月试试别的路。\n3. 探索其他出路，别把鸡蛋放一个篮子 你对就业市场很悲观，但其实有些方向可以试试：\nAI相关的工作：你对AI感兴趣，不一定要读研才能入行。可以自学一些基础（比如Python、机器学习入门），找个初级岗位或者实习，边做边学。 游戏设计/代码相关的小公司：你提到压力大，但小公司可能更灵活，能让你积累经验。如果AI冲击代码行业，你已经有了AI的兴趣和基础，反而可能是优势。 稳定型工作：运营商虽然工资低，但如果你想要稳定，可以作为过渡，先站稳脚跟，再慢慢找机会。 行动建议：拿出一周时间，刷刷招聘网站（比如Boss直聘、拉勾网），看看你专业相关的岗位要求是什么，然后针对性学点东西（比如某个框架、工具）。别觉得自己不行，很多初级岗位其实没那么高门槛。\n4. 接受现实，调整期待 你提到北京房价高、生活成本大，996环境不现实，这确实是很多人面临的难题。但“稳定”和“自由”不一定非要在超一线城市实现。你可以考虑：\n二线城市：生活成本低，压力小，离家人近，可能更符合你想要的“和朋友享受人生”。 远程工作：如果擅长代码，可以试试接外包或者找远程岗位，时间更灵活。 5. 给自己定个短期目标 你现在太焦虑，因为未来太模糊。不如先定个小目标，比如：\n“一个月内学会一个AI相关的技能（比如TensorFlow基础）。” “两周内投10份简历，看看市场反馈。” “每天花半小时写代码，找回点成就感。” 小目标能让你有掌控感，不会觉得自己一直在浪费时间。\n回答你的最后三个问题 三个让你最焦虑的问题：考研、未来、工作。 建议：考研可以再试一次，但别把它当唯一出路；未来不确定，但从小步开始走就不会迷失；工作不好找，但先试试总比空想强。 三个最希望实现的目标：上岸、抹掉三年浪费的时间、找到好工作。 现实点说：上岸可以努力，但别强求；时间回不去，但从现在开始行动就不算浪费；好工作需要积累，先找个能接受的起点。 智者的一条建议：你说“碌碌无为的三年，痛苦的一辈子”，但我觉得智者可能会告诉你： “过去的三年不是白费，它让你看清了什么重要；未来的一辈子也不一定痛苦，只要你愿意迈出一步，路就会慢慢清晰。” 最后想对你说 你不是失败者，也不是没希望的人。你有兴趣（代码、游戏设计），有目标（稳定、照顾家人），只是现在被困住了。别急着否定自己，也别急着把所有问题都解决。一步步来，先让自己好起来，再去面对考研、工作这些大事。\n如果你愿意，可以告诉我你接下来想干什么，或者有什么具体问题想聊，我会尽量帮你出主意！\n","date":"2025-03-18","permalink":"https://22cs.github.io/post/20250318-z1ryamy.html","title":"2025-03-18"},{"content":"13:45:07\n现在似乎好一点\n要不试试每天一个鸡汤小故事吧\n想办法自救\n12:01:24\n三四个小时过去了，什么都不想动，今天格外的焦躁。\n00:21:02\n真的是想吐，每天到了夜里都想吐\n情绪\n唉\n真的是深渊，完全的深渊\n为什么啊\n唉\n情绪啊情绪\n也是我实力不足\n今天要把编译原理的搞完\n然后人工智能的开了。\n真的想死。\n","date":"2025-03-17","permalink":"https://22cs.github.io/post/20250317-1yacoa.html","title":"2025-03-17"},{"content":"23:28:52\n今天，唉\n唉，绝望还是像漩涡，我被卷着，无法脱身\n至今还是难以接受，我真的无法相信\n唉，痛苦\n搭建一个博客，记录一下吧。\n人如果死了\n还是不能死，那个日本乐队的，活着，至少给别人带来了美好的记忆。死了，就只是懦夫。\n生命艰难啊\n我到底要怎么才能追上别人\n痛苦\n","date":"2025-03-16","permalink":"https://22cs.github.io/post/250316-2lu4u4.html","title":"25-03-16 "},{"content":"*This is a follow-up to my article “​The 70% problem: Hard truths about AI-assisted coding*​ ”这是我的文章“ *70% 的问题：关于人工智能辅助编码的残酷事实*​ ”的后续\nAI coding assistants like Cursor, Cline, Copilot and WindSurf have transformed how software is built, shouldering much of the grunt work and boilerplate. Yet, as experienced developers and industry leaders note, there remains a crucial portion of software engineering that AI does not handle well – roughly that last “30%” of the job that separates a toy solution from a production-ready system. This gap includes the hard parts: understanding complex requirements, architecting maintainable systems, handling edge cases, and ensuring code correctness. In other words, while AI can generate code, it often struggles with engineering.\nCursor、Cline、Copilot 和 WindSurf 等 AI 编码助手已经改变了软件的构建方式，承担了大部分繁重的工作和样板。然而，正如经验丰富的开发人员和行业领导者所指出的那样，软件工程中仍有一部分关键部分是 AI无法处理的——大约是将玩具解决方案与可用于生产的系统区分开来的最后“30%”的工作。这一差距包括困难的部分：理解复杂的需求、构建可维护的系统、处理极端情况以及确保代码的正确性。换句话说，虽然 AI 可以生成代码，但它在工程方面往往举步维艰。\nTim O’Reilly, reflecting on decades of technology shifts, reminds us that each leap in automation has changed how we program but not why we need skilled programmersWe’re not facing the end of programming, but rather “the end of programming as we know it today,” meaning developers’ roles are evolving, not evaporating.\n蒂姆·奥莱利 (Tim O’Reilly) 回顾了几十年的技术变迁，提醒我们，自动化的每一次飞跃都改变了我们的编程方式，但并没有改变我们需要熟练程序员的原因。我们面临的不是编程的终结，而是“我们今天所知的编程的终结”，这意味着开发人员的角色正在演变，而不是消失。\nThe challenge for today’s engineers is to embrace AI for what it does best (the first 70%) while doubling down on the durable skills and insights needed for the remaining 30%. This article dives into expert insights to identify which human skills remain crucial. We’ll explore what senior developers should continue to leverage and what junior developers must invest in to thrive alongside AI.\n当今工程师面临的挑战是，在充分利用人工智能最擅长的领域（前 70%）的同时，加倍培养剩余 30% 所需的持久技能和洞察力。本文深入探讨专家见解，以确定哪些人类技能仍然至关重要。我们将探讨高级开发人员应继续利用哪些技能，以及初级开发人员必须投资哪些技能才能与人工智能一起蓬勃发展。\nThe goal: pragmatic guidance for maximizing the value of that irreplaceable 30%, with actionable takeaways for engineers at every level.\n目标：提供实用的指导，最大限度地发挥那不可替代的 30% 的价值，并为各个级别的工程师提供可行的指导。\nAI-based coding tools are astonishingly good at certain tasks. They excel at producing boilerplate, writing routine functions, and getting projects most of the way to completion. In fact, many developers find that an AI assistant can implement an initial solution that covers roughly 70% of the requirements.\n基于人工智能的编码工具在某些任务上表现出色。它们擅长生成样板、编写常规函数以及完成大部分项目。事实上，许多开发人员发现，人工智能助手可以实现涵盖大约 70% 需求的初始解决方案。\nThis is often the straightforward, patterned part of the work – the kind of code that follows well-trod paths or common frameworks. As one Hacker News commenter observed, AI is superb at handling the “accidental complexity” of software (the repetitive, mechanical stuff) while the “essential complexity” – understanding and managing the inherent complexity of a problem – remains on human shoulders. In Fred Brooks’ classic terms, AI tackles the incidental, but not the intrinsic, difficulties of development.\n这通常是工作中简单而有模式的部分——遵循常规路径或通用框架的代码。正如一位 Hacker News 评论员所观察到的，人工智能在处理软件的 “偶然复杂性” （重复、机械的东西）方面非常出色，而 “本质复杂性” ——理解和管理问题固有的复杂性——仍然落在人类的肩上。用 Fred Brooks 的经典术语来说，人工智能解决了开发过程中的偶然困难，而不是内在困难。\nWhere do these tools struggle? Experienced engineers consistently report a “last mile” gap. AI can generate a plausible solution, but the final 30% – covering edge cases, refining the architecture, and ensuring maintainability – “needs serious human expertise”.\n这些工具的难点在哪里？经验丰富的工程师一直报告“最后一英里”的差距。人工智能可以生成一个合理的解决方案，但最后的 30% ——涵盖边缘情况、改进架构和确保可维护性——“需要大量的人类专业知识”。\nFor example, an AI might give you a function that technically works for the basic scenario, but it won’t automatically account for unusual inputs, race conditions, performance constraints, or future requirements unless explicitly told. AI can get you most of the way there, but that final crucial 30% (edge cases, keeping things maintainable, and solid architecture) needs serious human expertise.\n例如，人工智能可能会为您提供一个在技术上适用于基本场景的功能，但除非明确告知，否则它不会自动考虑异常输入、竞争条件、性能限制或未来需求。人工智能可以帮您实现大部分目标，但最后至关重要的 30%（边缘情况、保持可维护性和稳固的架构）需要人类的专业知识。\nMoreover, AI has a known tendency to generate convincing but incorrect output. It may introduce subtle bugs or “hallucinate” nonexistent functions and libraries. Steve Yegge wryly likens today’s large language models (LLMs) to “wildly productive junior developers” – incredibly fast and enthusiastic, but “potentially whacked out on mind-altering drugs,” prone to concocting crazy or unworkable approaches.\n此外，众所周知，人工智能倾向于生成令人信服但不正确的输出。它可能会引入微妙的错误或“产生幻觉”不存在的函数和库。Steve Yegge 讽刺地将当今的大型语言模型 (LLMs) 比作 “非常高效的初级开发人员” ——速度极快、热情高涨，但 “可能因服用精神错乱的药物而精神错乱”， 容易想出疯狂或不可行的方法。\nIn Yegge’s words, an LLM can spew out code that looks polished at first glance, yet if a less experienced developer naively says “Looks good to me!” and runs with it, hilarity (or disaster) ensues in the following weeks. The AI doesn’t truly understand the problem; it stitches together patterns that usually make sense. Only a human can discern whether a seemingly fine solution hides long-term landmines. Simon Willison echoed this after seeing an AI propose a bewitchingly clever design that only a senior engineer with deep understanding of the problem could recognize as flawed. The lesson: AI’s confidence far exceeds its reliability.\n用 Yegge 的话来说，LLM 可以写出乍一看很完美的代码，但如果经验不足的开发人员天真地说“我觉得这很好！”并照搬了，那么接下来的几周就会发生滑稽的事情（或灾难） 。人工智能并没有真正理解问题；它只是将通常有意义的模式拼凑在一起。只有人类才能辨别看似不错的解决方案是否隐藏着长期的地雷。Simon Willison在看到人工智能提出了一个非常巧妙的设计后也表达了同样的看法，只有对问题有深入了解的高级工程师才能识别出这个设计存在缺陷。教训是：人工智能的信心远远超过它的可靠性。\nCrucially, current AIs do not create fundamentally new abstractions or strategies beyond their training data. They won’t invent a novel algorithm or an innovative architecture for you – they remix what’s known. They also won’t take responsibility for decisions. As one engineer noted, “AIs don’t have ‘better ideas’ than what their training data contains. They don’t take responsibility for their work.”\n至关重要的是，当前的人工智能不会在其训练数据之外创造全新的抽象或策略。它们不会为您发明一种新颖的算法或创新的架构——它们只是重新组合已知的内容。它们也不会对决策负责。正如一位工程师所说， “人工智能没有比其训练数据所包含的‘更好的想法’。它们不对自己的工作负责。 ”\nAll of this means that the creative and analytical thinking – deciding what to build, how to structure it, and why – firmly remains a human domain. In summary, AI is a force multiplier for developers, handling the repetitive 70% and giving us a “turbo boost” in productivity. But it is not a silver bullet that can replace human judgment. The remaining 30% of software engineering – the hard parts – still requires skills that only trained, thoughtful developers can bring. Those are the durable skills to focus on. As one discussion put it: “AI is a powerful tool, but it’s not a magic bullet… human judgment and good software engineering practices are still essential.”\n所有这些都意味着，创造性和分析性思维——决定构建什么、如何构建以及为什么构建——仍然是人类的领域。总而言之，人工智能是开发人员的力量倍增器，处理重复的 70% 工作，并为我们带来生产力的“涡轮增压”。但它并不是可以取代人类判断的灵丹妙药。软件工程的其余 30%——最难的部分——仍然需要只有训练有素、深思熟虑的开发人员才能掌握的技能。这些是需要关注的持久技能。正如一次讨论所说： “人工智能是一种强大的工具，但它不是灵丹妙药……人类的判断力和良好的软件工程实践仍然必不可少。 ”\nTo thrive in an AI-enhanced development world, engineers should double down on the enduring skills and practices that AI cannot (yet) replicate. These capabilities will remain crucial no matter how advanced our tools become. In particular, focus on strengthening the following:\n为了在人工智能增强的开发世界中蓬勃发展，工程师应该加倍努力掌握人工智能无法复制的持久技能和实践。无论我们的工具变得多么先进，这些能力仍然至关重要。特别是要重点加强以下方面：\nSystem design \u0026 architectural thinking: Designing a coherent system requires understanding trade-offs, constraints, and the “big picture” beyond writing a few functions. AI can generate code but won’t automatically choose the best architecture for a complex problem. The overall design – how components interact, how data flows, how to ensure scalability and security – is part of that 30% that demands human insight. Senior developers have long honed this skill, and junior devs should actively cultivate it. Think in terms of patterns and principles (e.g. separation of concerns, modularity) – these guide an AI-generated solution toward maintainability. Remember, solid architecture doesn’t emerge by accident; it needs an experienced human hand on the wheel.\n系统设计和架构思维： 设计一个连贯的系统需要理解权衡、约束和“全局”，而不仅仅是编写几个函数。人工智能可以生成代码，但不会自动为复杂问题选择最佳架构。整体设计——组件如何交互、数据如何流动、如何确保可扩展性和安全性——是需要人类洞察力的 30% 的一部分。高级开发人员长期以来一直在磨练这项技能，初级开发人员应该积极培养它。从模式和原则的角度思考（例如关注点分离、模块化）——这些会引导人工智能生成的解决方案走向可维护性。请记住，坚实的架构不会偶然出现；它需要经验丰富的人手来掌控。 Handling edge cases \u0026 ambiguity: Real-world software lives rife with oddball scenarios and changing requirements. AI tends to solve the general case by default. It’s up to the developer to ask “What if…?” and probe for weaknesses. Durable skill here is critical thinking and foresight – enumerating edge cases, anticipating failures, and addressing them in code or design. This might mean thinking of null input, network outages, unusual user actions, or integration with other systems. Domain knowledge plays a role too: understanding the business context or the user’s environment will reveal edge cases that a generic AI simply doesn’t know about. Experienced engineers habitually consider these scenarios; juniors should practice systematically testing boundaries and questioning assumptions.\n处理极端情况和歧义： 现实世界中的软件充斥着奇怪的场景和不断变化的需求。人工智能倾向于默认解决一般情况。开发人员需要问“如果……会怎样？”并探究弱点。这里持久的技能是批判性思维和远见——列举极端情况，预测故障，并在代码或设计中解决它们。这可能意味着考虑空输入、网络中断、不寻常的用户操作或与其他系统的集成。领域知识也发挥着作用：了解业务背景或用户环境将揭示通用人工智能根本不知道的极端情况。经验丰富的工程师习惯性地考虑这些场景；初级工程师应该系统地练习测试边界和质疑假设。 Code review \u0026 quality assurance: With AI writing lots of code, the ability to rigorously review and test that code becomes even more critical. “Everyone will need to get a lot more serious about testing and reviewing code,” Steve Yegge emphasizes. Treat AI-generated code as you would a human junior developer’s output – you are the code reviewer responsible for catching bugs, security flaws, or sloppy implementations. This means strong skills in unit testing, integration testing, and debugging. Writing good tests is a durable skill that forces you to understand the spec and verify correctness. It’s wise to assume nothing works until proven otherwise. As one developer noted, AI often yields “functional but horribly optimized code” until you guide it through iterative improvement. Cultivate a testing mindset: verify every critical logic path, use static analysis or linters, and don’t shy away from rewriting AI-given code if it doesn’t meet your quality bar. Quality assurance is not an area to outsource to AI – it’s where human diligence shines.\n代码审查和质量保证： 由于人工智能编写了大量代码，严格审查和测试代码的能力变得更加重要。 “每个人都需要更加认真地对待测试和审查代码，” Steve Yegge 强调道。将人工智能生成的代码视为人类初级开发人员的输出——您是负责发现错误、安全漏洞或草率实现的代码审查者。这意味着您需要具备强大的单元测试、集成测试和调试技能。编写良好的测试是一项持久的技能，它迫使您了解规范并验证正确性。在证明其他方法无效之前，最好假设它们都行不通。正如一位开发人员所说，人工智能通常会产生 “功能齐全但优化糟糕的代码”， 除非您指导它进行迭代改进。培养测试思维：验证每一条关键的逻辑路径，使用静态分析或 linters，如果人工智能给出的代码不符合您的质量标准，请不要回避重写它。质量保证不是可以外包给人工智能的领域——这是人类勤奋的闪光点。 Debugging \u0026 problem-solving skills: When software doesn’t work as expected, you need real problem-solving chops to diagnose and fix it. AI can assist with debugging (for example, by suggesting possible causes), but it lacks true understanding of the specific context in which your application runs. Being able to reason through a complex bug – reproducing it, isolating the cause, understanding the underlying systems (OS, databases, libraries) – is a timeless engineering skill. This often requires a strong grasp of fundamentals (how memory and state work, concurrency, etc.) that junior developers must learn through practice. Use AI as a helper (it might explain error messages or suggest fixes), but don’t rely on it blindly. The skill to methodically troubleshoot and apply first principles when debugging sets great developers apart. It’s also a feedback loop: debugging AI-written code will teach you to prompt the AI better next time or avoid certain patterns.\n调试和解决问题的能力： 当软件不能按预期工作时，你需要真正的解决问题的能力来诊断和修复它。人工智能可以协助调试（例如，通过建议可能的原因），但它缺乏对应用程序运行的特定环境的真正理解。能够推理复杂的错误——重现它、隔离原因、理解底层系统（操作系统、数据库、库）——是一项永恒的工程技能。这通常需要牢牢掌握基础知识（内存和状态如何工作、并发性等），初级开发人员必须通过实践来学习。使用人工智能作为助手（它可能会解释错误消息或建议修复），但不要盲目依赖它。在调试时有条不紊地排除故障和应用第一原则的技能让优秀的开发人员脱颖而出。这也是一个反馈循环：调试人工智能编写的代码将教你下次更好地提示人工智能或避免某些模式。 Maintaining context \u0026 Big-Picture understanding: Software projects are not just isolated coding tasks; they exist within a larger context of user needs, timelines, legacy code, and team processes. AI has no innate sense of your project’s history or the rationale behind certain decisions (unless you explicitly feed all that into the prompt, which is often impractical). Humans need to carry that context. A durable skill here is systems thinking – understanding how a change in one part of the system might impact another, how the software serves the business objectives, and how all the moving pieces connect. This holistic perspective lets you use AI outputs appropriately. For example, if an AI suggests a clever shortcut that contradicts a regulatory requirement or company convention, you’ll catch it because you know the context. Junior engineers should make a point to learn the background of their projects and read design docs, so they can develop judgment about what fits and what doesn’t.\n保持背景和全局理解： 软件项目不仅仅是孤立的编码任务；它们存在于更大的用户需求、时间线、遗留代码和团队流程的背景中。人工智能无法天生了解您的项目历史或某些决策背后的理由（除非您将所有这些明确地输入到提示中，但这通常是不切实际的）。人类需要掌握这种背景。这里一个持久的技能是系统思维——了解系统一个部分的变化如何影响另一个部分，软件如何服务于业务目标，以及所有移动部件如何连接。这种整体视角让您可以适当地使用人工智能输出。例如，如果人工智能建议一个巧妙的捷径，与监管要求或公司惯例相矛盾，你会抓住它，因为你知道背景。初级工程师应该注意了解他们项目的背景并阅读设计文档，这样他们就可以判断什么合适，什么不合适。 Communication \u0026 collaboration: Building software is a team sport. AI doesn’t attend meetings (thank goodness) – humans still must talk to other humans to clarify requirements, discuss trade-offs, and coordinate work. Strong communication skills are as valuable as ever. Senior developers should leverage their ability to explain complex ideas, mentor others, and articulate vision. Junior developers should practice asking good questions and describing problems clearly (both to colleagues and to AI). Interestingly, prompting an AI is itself a form of communication; it requires you to precisely express what you want. This overlaps with a core engineering skill: requirements analysis. If you can formulate a clear prompt or spec, it means you’ve thought through the problem. Additionally, sharing knowledge, writing documentation, and reviewing others’ code are collaborative skills that AI cannot replace. In the future, as developers work “with” AI, the human-to-human collaboration in a team – making sure the right problems are being solved – stays vital. One emerging trend is that developers may focus more on high-level design discussions (often with AI as a participant) and on coordinating tasks, essentially taking on more of a conductor role. Communication and leadership skills will serve you well in that conductor’s seat.\n沟通与协作： 开发软件是一项团队运动。人工智能不会参加会议（谢天谢地）——人类仍然必须与其他人交谈以澄清需求、讨论权衡和协调工作。强大的沟通技巧比以往任何时候都更有价值。高级开发人员应该利用他们解释复杂想法、指导他人和表达愿景的能力。初级开发人员应该练习提出好问题并清楚地描述问题（对同事和人工智能）。有趣的是，提示人工智能本身就是一种沟通形式；它要求你准确地表达你想要什么。这与一项核心工程技能重叠：需求分析。如果你能制定明确的提示或规范，这意味着你已经仔细考虑过这个问题。此外，分享知识、编写文档和审查他人的代码是人工智能无法取代的协作技能。在未来，当开发人员“与”人工智能一起工作时，团队中的人与人之间的协作——确保解决正确的问题——仍然至关重要。一个新兴趋势是，开发人员可能会更多地关注高层设计讨论（通常以 AI 作为参与者）和协调任务，本质上更多地承担指挥角色。沟通和领导能力将使您在指挥席上大有裨益。 Adaptability \u0026 continuous learning: Finally, a meta-skill: the ability to learn new tools and adapt to change. The field of AI-assisted development is evolving rapidly. Senior engineers who keep an open mind and learn how to effectively use new AI features will remain ahead of the curve – Tim O’Reilly suggests that developers who are “eager to learn new skills” will see the biggest productivity boosts from AI. Junior developers, in turn, should invest in learning the fundamentals deeply and staying curious about new techniques. This combination enables you to harness AI as a tool without becoming dependent on it. It’s a balancing act: use AI to accelerate your growth, but also occasionally practice without it to ensure you’re not skipping core learning (some developers do an “AI detox” periodically to keep their raw coding skills sharp. In short, be the engineer who learns constantly – that’s a career-proof skill in any era.\n适应性和持续学习： 最后，还有一项元技能：学习新工具和适应变化的能力。人工智能辅助开发领域正在迅速发展。保持开放心态并学习如何有效使用新人工智能功能的高级工程师将保持领先地位——Tim O’Reilly 认为， “渴望学习新技能” 的开发人员将从人工智能中获得最大的生产力提升。初级开发人员则应该投入精力深入学习基础知识​ ，并对新技术保持好奇心。这种结合使你能够利用人工智能作为一种工具，而不会依赖它。这是一种平衡行为：使用人工智能来加速你的成长，但偶尔也要练习不使用人工智能，以确保你没有跳过核心学习（一些开发人员会定期进行“人工智能排毒”，以保持他们原始的编码技能敏锐）。简而言之，做一个不断学习的工程师——这是在任何时代都适合职业发展的技能。 These skills form the human advantage in software engineering. They are durable because they don’t expire with the next framework or tooling change; if anything, AI’s rise makes them more pronounced. Simon Willison has argued that AI assistance actually makes strong programming skills more valuable, not less, because those with expertise can leverage the tools to far greater effect.\n这些技能构成了软件工程中的人类优势。它们之所以经久不衰，是因为它们不会随着下一个框架或工具的改变而过期；如果说有什么不同的话，那就是人工智能的崛起使它们更加突出。西蒙·威利森 (Simon Willison) 认为，人工智能的帮助实际上使强大的编程技能更有价值，而不是更少，因为那些拥有专业知识的人可以充分利用这些工具，发挥更大的作用。\nA powerful machine in unskilled hands can be dangerous or wasted, but in capable hands it’s transformative. In the AI era, an experienced engineer is like a seasoned pilot with a new advanced co-pilot: the journey can go faster and farther, but the pilot must still navigate the storms and ensure a safe landing.\n一台强大的机器落入不熟练的人手中可能会很危险或浪费，但落入熟练的人手中却可以带来变革。在人工智能时代，经验丰富的工程师就像经验丰富的飞行员和新的高级副驾驶：旅程可以更快更远，但飞行员仍必须驾驭风暴，确保安全着陆。\nFor senior engineers, the advent of AI coding tools should be seen as an opportunity to amplify your impact – if you leverage your experience in the right ways. Senior developers typically possess deep domain knowledge, intuition for what could go wrong, and the ability to make high-level technical decisions.\n对于高级工程师来说，AI 编码工具的出现应该被视为扩大影响力的机会——前提是你能以正确的方式利用自己的经验。高级开发人员通常拥有深厚的领域知识、对可能出现的问题的直觉以及做出高级技术决策的能力。\nThese strengths are part of the 30% that AI can’t handle alone. Here’s how seasoned developers can maximize their value:\n这些优势是 AI 无法独自处理的 30% 的一部分。以下是经验丰富的开发人员如何最大限度地发挥其价值的方法：\nBe the architect and the Editor-in-Chief: Let AI handle the first draft of code, while you focus on architecting the solution and then refining the AI’s output. In many organizations, we may see a shift where teams need “only senior associates” who “(a) describe the tasks to be done (i.e. create the prompts), and (b) review the resulting work for accuracy and correctness”. Embrace that model. As a senior dev, you can translate complex requirements into effective prompts or specifications for an AI assistant, then use your critical eye to vet every line produced. You are effectively pair-programming with the AI – it’s the fast typer, but you’re the brain. Maintain high standards during review: ensure the code meets your organization’s quality, security, and performance benchmarks. By acting as architect and editor, you prevent the “high review burden” from overwhelming you. (A cautionary note: if junior staff simply throw raw AI output over the wall to you, push back – instill a process where they must verify AI-generated work first, so you’re not the sole safety net.\n成为架构师和主编： 让 AI 处理代码的初稿，而您则专注于设计解决方案，然后优化AI 的输出。在许多组织中，我们可能会看到一种转变，即团队只需要“高级助理”，他们“（a）描述要完成的任务（即创建提示），（b）审查最终工作的准确性和正确性”。接受这种模式。作为高级开发人员，您可以将复杂的需求转化为有效的提示或 AI 助手规范，然后用您的批判眼光审查生成的每一行代码。您实际上是在与 AI 结对编程——它是快速打字者，但您是大脑。在审查期间保持高标准：确保代码符合组织的质量、安全性和性能基准。通过充当架构师和编辑，您可以避免“高审查负担”压垮您。 （注意事项：如果初级员工只是将原始的人工智能输出扔给你，请反击——灌输一个必须首先验证人工智能生成的工作的流程，这样你就不是唯一的安全网。） Use AI as a force multiplier for big initiatives: Senior engineers often drive large projects or tackle hairy refactors that juniors can’t approach alone. AI can supercharge these efforts by handling a lot of mechanical changes or exploring alternatives under your guidance. Steve Yegge introduced the term Chat-Oriented Programming (​CHOP​ ) for this style of working – “coding via iterative prompt refinement” with the AI as a collaborator. Leverage CHOP to be more ambitious in what you take on. As Simon Willison noted, having AI assistance “lowers the bar for when a project is worth investing time in at all” since what might have taken days could be done in hours. Senior devs can thus attempt those “wouldn’t it be nice if…?” projects that always seemed slightly out of reach. The key is to remain the guiding mind: you decide which tools or approaches to pursue, and you integrate the pieces into a cohesive whole. Your experience allows you to sift the AI’s suggestions – accepting those that fit, rejecting those that don’t.\n使用 AI 作为大计划的力量倍增器： 高级工程师经常推动大型项目或解决初级工程师无法独自完成的棘手重构。AI 可以通过在您的指导下处理大量机械变化或探索替代方案来增强这些努力。Steve Yegge 为这种工作方式引入了聊天导向编程 ( CHOP ) 一词——“通过迭代快速改进进行编码”，AI 作为合作者。利用 CHOP 让您在承担的工作中更具雄心。正如 Simon Willison 所说，拥有 AI 的帮助“降低了项目值得投入时间的门槛”，因为原本可能需要几天才能完成的工作可以在几个小时内完成。因此，高级开发人员可以尝试那些“如果……会不会很好？”的项目，这些项目似乎总是有点遥不可及。关键是要保持指导思想：您决定采用哪些工具或方法，并将各个部分整合成一个有凝聚力的整体。您的经验让您可以筛选 AI 的建议——接受合适的建议，拒绝不合适的建议。 Mentor and set standards in the AI Era: Another crucial role for senior engineers is to coach less experienced team members on effective use of AI and on the timeless best practices. You likely have hard-won knowledge of pitfalls that juniors may not see (memory leaks, off-by-one errors, concurrency hazards, etc.). With juniors now potentially generating code via AI, it’s important to teach them how to self-review and test that code. Set an example by demonstrating thorough testing of AI contributions, and encourage a culture of not blindly trusting machine output. Some organizations (and even law firms) have instituted rules that if someone uses an AI, they must disclose it and verify the results themselves – not just assume a senior will catch mistakes. Seniors should champion such norms on their teams: AI is welcome, but diligence is required. By mentoring juniors in this way, you offload some of the oversight burden and help them grow into that 30% skillset more quickly.\n在人工智能时代指导和制定标准： 高级工程师的另一个关键角色是指导经验不足的团队成员有效使用人工智能和永恒的最佳实践。您可能已经掌握了初级工程师可能看不到的陷阱（内存泄漏、差一错误、并发风险等）的来之不易的知识。由于初级工程师现在可能通过人工智能生成代码，因此教会他们如何自我审查和测试代码非常重要。通过展示对人工智能贡献的全面测试来树立榜样，并鼓励一种不盲目信任机器输出的文化。一些组织（甚至律师事务所）已经制定了规则，如果有人使用人工智能，他们必须披露并亲自验证结果——而不仅仅是假设高级工程师会发现错误。高级工程师应该在他们的团队中倡导这样的规范：欢迎人工智能，但需要勤奋。通过以这种方式指导初级工程师，您可以减轻一些监督负担，并帮助他们更快地掌握那 30% 的技能。 Continue to cultivate domain mastery and foresight: Your broad experience and context are more important than ever. Senior developers often have historical knowledge of why things are built a certain way or how an industry operates. This domain mastery lets you catch AI’s missteps that a newcomer wouldn’t. Continue investing in understanding the problem domain deeply – that might mean staying up to date with the business’s needs, user feedback, or new regulations that affect the software. AI won’t automatically incorporate these considerations unless told. When you combine domain insight with AI’s speed, you get the best outcomes. Also, use your foresight to steer AI. For instance, if you know that a quick fix will create maintenance pain down the line, you can instruct the AI to implement a more sustainable solution. Seniors should trust their instincts honed over years – if a code snippet “looks off” or too good to be true, dig in. Nine times out of ten there’s something your intuition spotted that the AI didn’t account for. Being able to foresee the second- and third-order effects of code is a hallmark of senior engineers; don’t let the convenience of AI blunt that habit. Instead, apply it to whatever the AI produces.\n继续培养领域精通和远见： 你的广泛经验和背景比以往任何时候都重要。高级开发人员通常具有历史知识，了解事物以某种方式构建的原因或行业如何运作。这种领域精通让你能够发现新手无法发现的人工智能的失误。继续投资深入了解问题领域——这可能意味着要随时了解业务需求、用户反馈或影响软件的新法规。除非得到告知，否则人工智能不会自动纳入这些考虑因素。当你将领域洞察力与人工智能的速度结合起来时，你会得到最好的结果。此外，利用你的远见来引导人工智能。例如，如果你知道快速修复会在后期造成维护麻烦，你可以指示人工智能实施更可持续的解决方案。资深开发人员应该相信他们多年磨练出来的直觉——如果一个代码片段“看起来不对劲”或好得令人难以置信，那就深入研究。十有八九，你的直觉会发现人工智能没有考虑到的东西。能够预见代码的二阶和三阶效应是高级工程师的标志；不要让人工智能的便利削弱这一习惯。相反，将其应用于人工智能产生的任何东西。 Leverage soft skills and leadership: With AI shouldering some coding, senior developers can spend more energy on the human side of engineering. This includes communicating with stakeholders, leading design meetings, and making judgment calls that align technology with business strategy. Tim O’Reilly and others suggest that as rote coding becomes easier, the value shifts to deciding what to build and how to orchestrate complex systems. Senior engineers are often the ones orchestrating and seeing the big picture. Step up to that role. Volunteer to write that architecture roadmap, to evaluate which tools (AI or otherwise) to adopt, or to define coding guidelines for AI usage in your org. These are tasks AI can’t do – they require experience, human discretion and often cross-team consensus-building. By amplifying your leadership presence, you ensure that you’re not just a code generator (replaceable by another tool), but an indispensable technical leader guiding the team in this new era.\n利用软技能和领导力： AI 承担了一些编码工作，高级开发人员可以将更多精力投入到工程的人性化方面。这包括与利益相关者沟通、主持设计会议以及做出将技术与业务战略相结合的判断。Tim O’Reilly 和其他人认为，随着死记硬背的编码变得越来越容易，价值将转移到决定构建什么以及如何协调复杂系统。高级工程师通常是协调和看清大局的人。承担起这个角色。自愿编写架构路线图，评估采用哪些工具（AI 或其他），或定义组织中 AI 使用的编码指南。这些是 AI 无法完成的任务——它们需要经验、人类的判断力，并且通常需要跨团队达成共识。通过扩大你的领导力，你可以确保你不仅仅是一个代码生成器（可以被其他工具替代），而是一个在这个新时代指导团队不可或缺的技术领导者。 In short, continue doing what seasoned developers do best: see the forest for the trees.\n简而言之，继续做经验丰富的开发人员最擅长的事情：只见树木，不见森林。\nAI will help you chop a lot more trees, but someone still needs to decide which trees to cut and how to build a stable house from the lumber. Your judgment, strategic thinking, and mentorship are now even more critical. A senior developer who harnesses AI effectively can be dramatically more productive than one who doesn’t – but the ones who truly excel will be those who apply their human strengths to amplify the AI’s output, not just let the AI run wild.\n人工智能将帮助你砍伐更多的树木，但仍然需要有人决定砍伐哪些树木以及如何用木材建造坚固的房屋。你的判断力、战略思维和指导现在变得更加重要。有效利用人工智能的高级开发人员的生产力可能比没有利用人工智能的高级开发人员高得多——但真正出类拔萃的人将是那些利用人类优势来扩大人工智能产出的人，而不是让人工智能肆意妄为。\nAs one Redditor quipped, “AI is a programming force multiplier” that “greatly increases the productivity of senior programmers” . The multiplier effect is real, but it’s your expertise that’s being multiplied. Keep that expertise sharp and at the center of the development process.\n正如一位 Reddit 用户所说， “人工智能是一种编程力量倍增器” ，它 “极大地提高了高级程序员的生产力” 。倍增效应是真实存在的，但倍增的是你的专业知识。保持专业知识的敏锐性，并将其置于开发过程的中心。\nIf you’re a junior or less-experienced developer, you might feel a mix of excitement and anxiety about AI. On one hand, AI assistants can write code that you might not know how to write yourself, potentially accelerating your learning. On the other hand, there are headlines like “death of the junior developer” suggesting entry-level coding jobs are at risk.\n如果你是初级或经验不足的开发人员，你可能会对人工智能感到兴奋和焦虑。一方面，人工智能助手可以编写你自己可能不知道如何编写的代码，这可能会加速你的学习。另一方面，有“初级开发人员的死亡”之类的标题暗示入门级编码工作面临风险。\nThe truth is somewhere in between: AI is changing the early-career experience, but junior developers are not obsolete. You do, however, need to be proactive in developing skills that ensure you’re contributing value beyond what an AI can churn out. Here’s how to invest in yourself to handle that 30% gap effectively:\n事实介于两者之间：人工智能正在改变早期的职业体验，但初级开发人员并没有过时。然而，你确实需要积极主动地发展技能，以确保你贡献的价值超出人工智能所能创造的价值。以下是如何投资自己以有效弥补这 30% 的差距：\nLearn the fundamentals – don’t skip the “why”: It’s tempting to lean on AI for answers to every question (“How do I do X in Python?”) and never truly absorb the underlying concepts. Resist that urge. Use AI as a tutor, not just an answer vending machine. For example, when AI gives you a piece of code, ask why it chose that approach, or have it explain the code line by line. Make sure you understand concepts like data structures, algorithms, memory management, and concurrency without always deferring to AI. The reason is simple: when the AI’s output is wrong or incomplete, you need your own mental model to recognize and fix it. As one engineer noted, if you’re “not actively engaging with why the AI is generating certain code, you might actually learn less”, hindering your growth. So take time to read documentation, write small programs from scratch, and solidify your core knowledge. These fundamentals are durable; they’ll serve you even as the tools around you change.\n学习基础知识——不要跳过“为什么”： 人们很容易依赖人工智能来回答每个问题（“我如何用 Python 做 X？”），而从不真正吸收底层概念。抵制这种冲动。将人工智能用作导师，而不仅仅是答案自动售货机。例如，当人工智能给你一段代码时，问问它为什么选择这种方法，或者让它逐行解释代码。确保你理解数据结构、算法、内存管理和并发等概念，而不要总是听从人工智能。原因很简单：当人工智能的输出错误或不完整时，你需要自己的心理模型来识别和修复它。正如一位工程师所说，如果你“不积极参与人工智能生成某些代码的原因，你实际上可能会学到更少”，从而阻碍你的成长。因此，花点时间阅读文档，从头开始编写小程序，巩固你的核心知识。这些基础知识是持久的；即使你周围的工具发生变化，它们也会为你服务。 Practice problem solving \u0026 debugging without the AI safety net: To build real confidence, sometimes you have to fly solo. Many developers advocate doing an “AI-free day” or otherwise limiting AI assistance periodically. This ensures you can still solve problems with just your own skills, which is important for avoiding skill atrophy. You’ll find it forces you to truly think through a problem’s logic, which in turn makes you better at using AI (since you can direct it more intelligently). Additionally, whenever you encounter a bug or error in AI-generated code, jump in and debug it yourself before asking the AI to fix it. You’ll learn much more by stepping through a debugger or adding print statements to see what’s going wrong. Consider AI suggestions as hints, not final answers. Over time, tackling those last tricky bits of a task will build your skill in the very areas AI struggles – exactly what makes you valuable.\n在没有人工智能安全网的情况下练习解决问题和调试： 要建立真正的信心，有时你必须独自行动。许多开发人员主张进行“无人工智能日”或定期限制人工智能的协助。这可以确保你仍然可以仅凭自己的技能解决问题，这对于避免技能萎缩非常重要。你会发现它迫使你真正思考问题的逻辑，这反过来会让你更好地使用人工智能（因为你可以更智能地指导它）。此外，每当你遇到人工智能生成的代码中的错误或错误时，在要求人工智能修复它之前，请先自己调试它。通过逐步执行调试器或添加打印语句来查看出了什么问题，你将学到更多。将人工智能的建议视为提示，而不是最终答案。随着时间的推移，解决任务的最后棘手部分将培养你在人工智能困难领域的技能——这正是你的价值所在。 Focus on testing and verification: As a junior dev, one of the best habits you can develop is writing tests for your code. This is doubly true if you use AI to generate code. When you get a chunk of code from an LLM, don’t assume it’s correct – challenge it. Write unit tests (or use manual tests) to see if it truly handles the requirements and edge cases. This accomplishes two things: (1) it catches issues in the AI’s output, and (2) it trains you to think about expected behavior before trusting an implementation. You might even use the AI to help write tests, but you define what to test. Steve Yegge’s advice about taking testing and code review seriously applies at all levels. If you cultivate a reputation for carefully verifying your work (AI-assisted or not), senior colleagues will trust you more and you’ll avoid the scenario where they feel you’re just “dumping” questionable code on them. In practical terms, start treating testing as an integral part of development, not an afterthought. Learn how to use testing frameworks, how to do exploratory manual testing, and how to systematically reproduce bugs. These skills not only make you better at the 30% work, they also accelerate your understanding of how the code really works. Remember: if you catch a bug that the AI introduced, you just did something the AI couldn’t – that’s added value.\n专注于测试和验证： 作为初级开发人员，您可以养成的最佳习惯之一就是为您的代码编写测试。如果您使用 AI 生成代码，则更是如此。当您从 LLM 获得一段代码时，不要假设它是正确的 - 挑战它。编写单元测试（或使用手动测试）以查看它是否真正处理了需求和边缘情况。这可以实现两件事：（1）它捕获 AI 输出中的问题，（2）它训练您在信任实现之前考虑预期的行为。您甚至可以使用 AI 来帮助编写测试，但您定义要测试的内容。Steve Yegge 关于认真对待测试和代码审查的建议适用于所有级别。如果您培养了仔细验证工作（无论是否由 AI 辅助）的声誉，高级同事会更加信任您，并且您将避免他们认为您只是在“倾倒”可疑代码的情况。实际上，开始将测试视为开发的一个组成部分，而不是事后的想法。学习如何使用测试框架、如何进行探索性手动测试以及如何系统地重现错误。这些技能不仅能让你更好地完成 30% 的工作，还能加速你对代码实际工作原理的理解。请记住：如果你发现了 AI 引入的错误，你就做了 AI 无法做到的事情——这就是附加值。 Build an eye for maintainability: Junior devs often focus on “getting it to work.” But in the AI era, getting a basic working version is easy – the AI can do that. The harder part (and what you should focus on) is making code that’s readable, maintainable, and clean. Start developing an eye for good code structure and style. Compare the AI’s output with best practices you know of; if the AI code is messy or overly complex, take the initiative to refactor it. For instance, if an LLM gives you a 50-line function that does too many things, you can split it into smaller functions. If variable names are unclear, rename them. Essentially, pretend you’re a human code reviewer (even if you’re junior) and improve the AI’s code as if a peer wrote it. This will help you internalize good design principles. Over time, you’ll start prompting the AI in ways that yield cleaner code to begin with (because you’ll specify the style you want). Maintainers of software (often teams working months or years later) will thank you, and you’ll prove that you’re thinking beyond just “make it run” – you’re thinking like an engineer. Keeping things maintainable is exactly in that human-driven 30%, so make it your concern from the start of your career.\n培养对可维护性的洞察力： 初级开发人员通常专注于“让代码运行”。但在人工智能时代，获得一个基本的可运行版本很容易——人工智能可以做到这一点。更难的部分（也是你应该关注的）是编写可读、可维护和干净的代码。开始培养对良好代码结构和风格的洞察力。将人工智能的输出与你所知道的最佳实践进行比较；如果人工智能代码混乱或过于复杂，请主动重构它。例如，如果LLM给你一个 50 行的函数，它做了太多的事情，你可以将它拆分成更小的函数。如果变量名不清楚，请重命名它们。本质上，假装你是一个人类代码审查者（即使你是初级的），并改进人工智能的代码，就像同行编写的一样。这将帮助你内化好的设计原则。随着时间的推移，你将开始以产生更干净的代码的方式提示人工智能（因为你会指定你想要的风格）。软件维护人员（通常是数月或数年后工作的团队）会感谢你，而你将证明你的想法不仅仅是“让它运行”——你像工程师一样思考。保持事物可维护性正是人为驱动的 30%，所以从你的职业生涯一开始就把它作为你的关注点。 Develop your prompting and tooling skills (wisely): There’s no denying that “prompt engineering” – the skill of interacting with AI tools effectively – is useful. As a junior dev, you should absolutely learn how to phrase questions to AI, how to give it proper context, and how to iterate on prompts to improve the output. These are new skills that can set you apart (many experienced devs are still figuring this out too!). However, remember that prompting well is often a proxy for understanding the problem well. If you find you can’t get the AI to do what you want, it might be because you need to clarify your own understanding first. Use that as a signal. One strategy is to outline a solution in plain English yourself before asking the AI to implement it. Also, experiment with different AI tools (Copilot, Claude, etc.) to see their strengths and weaknesses. The more fluent you are with these assistants, the more productive you can be – but never treat their output as infallible. Think of AI like a super-charged Stack Overflow: an aid, not an authority. You might even build small personal projects using AI to push your limits (e.g. “Can I build a simple web app with AI’s help?”). Doing so will teach you how to integrate AI into a development workflow, which is a great skill to bring into a team. Just balance it with periods of working without the net, as mentioned earlier.\n明智地发展你的提示和工具技能： 不可否认，“提示工程”——与人工智能工具有效交互的技能——是有用的。作为一名初级开发人员，你绝对应该学习如何向人工智能提出问题，如何给它适当的背景，以及如何迭代提示以改进输出。这些是可以让你脱颖而出的新技能（许多经验丰富的开发人员也仍在弄清楚这一点！）。但是，请记住，良好的提示通常是理解问题的一种方式。如果你发现你无法让人工智能做你想做的事情，那可能是因为你需要先澄清自己的理解。把它当作一个信号。一种策略是在要求人工智能实施之前，自己用简单的英语概述解决方案。此外，尝试不同的人工智能工具（Copilot、Claude 等）以了解它们的优缺点。你对这些助手的熟练程度越高，你的工作效率就越高——但永远不要把它们的输出视为万无一失。把人工智能想象成一个超级强大的 Stack Overflow：一种辅助工具，而不是权威。你甚至可以使用人工智能来构建小型个人项目，以突破自己的极限（例如，“我可以在人工智能的帮助下构建一个简单的 Web 应用程序吗？”）。这样做将教会你如何将人工智能集成到开发工作流程中，这是一项非常适合团队使用的技能。只需平衡好它与没有网络的工作时间，如前所述。 Seek feedback and mentorship: Lastly, one durable skill that will accelerate your growth is the ability to seek out feedback and learn from others. AI won’t get offended if you ignore its advice, but your human teammates and mentors are invaluable for your development. Don’t hesitate to ask a senior developer why they prefer one solution over another, especially if it differs from what an AI suggested. Discuss design decisions and trade-offs with more experienced colleagues – these conversations reveal how seasoned engineers think, and that’s gold for you. In code reviews, be extra receptive to comments about your AI-written code. If a reviewer points out that “this function isn’t thread-safe” or “this approach will have scaling issues,” take the time to understand the root issue. These are exactly the kind of things an AI might miss and you want to learn to catch. Over time, you’ll build a mental checklist of considerations. Additionally, find opportunities to pair program (even if remotely). Perhaps you can “pair” with a senior who uses AI in their workflow – you’ll observe how they prompt the AI and how they correct it. Being open to feedback and actively asking for guidance will help you mature from doing tasks that an AI could do to doing the high-value tasks that only humans can do. In a sense, you’re trying to acquire the wisdom that usually comes with experience, as efficiently as you can. That makes you more than just another coder in the room – it makes you the kind of engineer teams are eager to keep and promote.\n寻求反馈和指导： 最后，一项可以加速您成长的持久技能是寻求反馈和向他人学习的能力。如果您忽略了人工智能的建议，它不会生气，但您的人类队友和导师对您的发展来说是无价的。不要犹豫，向高级开发人员询问为什么他们更喜欢一种解决方案而不是另一种解决方案，特别是当它与人工智能建议的不同时。与更有经验的同事讨论设计决策和权衡——这些对话揭示了经验丰富的工程师的想法，这对您来说是宝贵的。在代码审查中，要特别接受有关您的人工智能编写的代码的评论。如果审阅者指出“此功能不是线程安全的”或“这种方法会有扩展问题”，请花时间了解根本问题。这些正是人工智能可能会错过的东西，而您想要学会捕捉到。随着时间的推移，您将在脑海中建立一个考虑事项清单。此外，寻找配对编程的机会（即使是远程的）。也许你可以与一位在工作流程中使用人工智能的资深人士“结对”——你会观察他们如何提示人工智能以及如何纠正它。乐于接受反馈并积极寻求指导将帮助你从完成人工智能可以完成的任务成长为完成只有人类才能完成的高价值任务。从某种意义上说，你正在尽可能高效地尝试获取通常来自经验的智慧。这让你不仅仅是房间里的另一位程序员——它让你成为团队渴望留住和提拔的那种工程师。 It’s worth noting a mindset shift for juniors in the AI era: move from just consuming solutions to creating understanding. In the past, a junior might struggle through documentation and eventually write a feature; now an AI can hand you a solution on a platter. If you simply consume it (copy-paste and move on), you haven’t grown much.\n值得注意的是，人工智能时代的初级员工的思维模式发生了转变：从仅仅使用解决方案转变为创造理解。过去，初级员工可能会费力地阅读文档，最终编写出一个功能；现在，人工智能可以为你提供解决方案。如果你只是使用它（复制粘贴然后继续），那么你并没有成长多少。\nInstead, use each AI-given solution as a learning case. Dissect it, experiment with it, and consider how you might have arrived at it yourself. By treating AI outputs not as answers to end all questions but as interactive learning material, you ensure that you – the human – are continuously leveling up. This way, rather than AI replacing your growth, it accelerates it. Many experts believe that while AI might reduce the need for large teams of junior “coder-grinders,” it also raises the bar for what it means to be a junior developer. The role is shifting to someone who can work effectively with AI and quickly climb the value chain. If you adopt the habits above, you’ll distinguish yourself as a junior developer who doesn’t just bring what an AI could bring (any company can get that via a subscription), but who brings insight, reliability, and continuous improvement – traits of a future senior developer.\n相反，将每个 AI 给出的解决方案作为一个学习案例。分析它，试验它，并思考你自己是如何得出这个结论的。通过将 AI 输出视为交互式学习材料而不是所有问题的答案，你可以确保你——人类——不断升级。这样，AI 不会取代你的成长，而是会加速你的成长。许多专家认为，虽然 AI 可能会减少对大型初级“编码员”团队的需求，但它也提高了初级开发人员的标准。这个角色正在转移到能够有效使用 AI 并快速攀登价值链的人身上。如果你养成上述习惯，你将成为一名初级开发人员，你不仅能带来 AI 可以带来的东西（任何公司都可以通过订阅获得），还能带来洞察力、可靠性和持续改进——这些都是未来高级开发人员的特质。\nSoftware engineering has always been a field of continuous change – from assembly language to high-level programming, from on-prem servers to the cloud, and now from manual coding to AI-assisted development. Each leap has automated some aspect of programming, yet each time developers have adapted and found even more to do. As Tim O’Reilly notes, past innovations “almost always resulted in more work, more growth, more opportunities” for developers. The rise of AI is no different. Rather than making developers irrelevant, it is reshaping the skillset needed to succeed. The mundane 70% of coding is getting easier; the challenging 30% becomes an even larger part of our value.\n软件工程一直是一个不断变化的领域——从汇编语言到高级编程，从本地服务器到云，现在又从手动编码到人工智能辅助开发。每一次飞跃都使编程的某些方面实现了自动化，但每次开发人员都会适应并发现更多事情要做。正如 Tim O’Reilly 所说，过去的创新“几乎总是为开发人员带来更多工作、更多成长和更多机会”。人工智能的兴起也不例外。它并没有让开发人员变得无关紧要，而是重塑了成功所需的技能。70% 的平凡编码变得越来越容易；具有挑战性的 30% 成为我们价值的重要组成部分。\nTo maximize that human 30%, focus on the timeless engineering skills: understanding problems deeply, designing clean solutions, scrutinizing code for quality, and considering the users and context. Those who combine these skills with AI tools will outperform those who have only one or the other. In fact, the consensus emerging among experts is that AI is a tool for the skilled. Experienced programmers are gaining more from AI because they know how to guide it and what to do when it falters. It’s been said that “LLMs are power tools meant for power users.” . This means the onus is on each of us to become that “power user” – to cultivate the expertise that lets us wield these new tools effectively.\n为了最大限度地发挥那 30% 的人力，需要专注于永恒的工程技能：深入理解问题、设计清晰的解决方案、仔细检查代码质量以及考虑用户和上下文。将这些技能与 AI 工具相结合的人将比只拥有其中一种技能的人表现更好。事实上，专家们正在达成的共识是， AI 是技术娴熟的人的工具。经验丰富的程序员从 AI 中获益更多，因为他们知道如何引导它，以及当它出现问题时该怎么做。有人说， “LLMs 是为高级用户设计的强大工具” 。这意味着我们每个人都有责任成为那个“高级用户”——培养让我们有效使用这些新工具的专业知识。\nUltimately, the craft of software engineering is more than writing code that works. It’s about writing code that works well – in a real-world environment, over time, and under evolving requirements. Today’s AI can assist with writing code, but it cannot yet ensure the code works well in all those dimensions. That’s the developer’s job.\n归根结底，软件工程的技艺不只是编写能运行的代码。它还涉及编写运行良好的代码——在现实环境中、随着时间的推移和不断变化的需求下。当今的人工智能可以协助编写代码，但它还不能确保代码在所有这些方面都能很好地运行。这是开发人员的工作。\nBy doubling down on the skills outlined above, senior developers can continue to lead and innovate, and junior developers can accelerate their journey to mastery. AI will handle more and more of the routine, but your creativity, intuition, and thoughtful engineering will turn that raw output into something truly valuable. AI is a powerful tool, but it’s all about how we use it. Good engineering practices, human judgment, and a willingness to learn will remain essential.\n通过加倍培养上述技能，高级开发人员可以继续领导和创新，初级开发人员可以加速他们的精通之旅。人工智能将处理越来越多的日常工作，但你的创造力、直觉和深思熟虑的工程将把这些原始输出变成真正有价值的东西。人工智能是一个强大的工具，但关键在于我们如何使用它。 良好的工程实践、人类判断力和学习意愿仍将至关重要。\nIn practical terms, whether you are pair-programming with an “eager junior” AI that writes your functions, or reviewing a diff full of AI-generated code, never forget to apply your uniquely human lens. Ask: Does this solve the right problem? Will others be able to understand and maintain this? What are the risks and edge cases? Those questions are your responsibility. The future of programming will indeed involve less typing every semicolon by hand and more directing and curating – but it will still require developers at the helm who have the wisdom to do it right.\n从实际角度来看，无论是与编写函数的“热切初级”AI 结对编程，还是审查充满 AI 生成代码的差异，都不要忘记运用您独特的人类视角。问问自己：这解决了正确的问题吗？其他人能够理解和维护这一点吗？风险和极端情况是什么？这些问题是您的责任。编程的未来确实将减少手动输入每个分号，而增加指导和策划——但它仍然需要有智慧的开发人员掌舵，以正确行事。\nActionable takeaways:可操作的建议：\nAdopt a growth mindset with AI: Use it to amplify productivity, but commit to learning why solutions work. Treat AI as a partner, not a crutch, and regularly challenge yourself to work through problems without it to build your skills.\n以成长心态对待人工智能： 利用人工智能来提高生产力，但要致力于了解解决方案为何有效。将人工智能视为合作伙伴，而不是拐杖，并定期挑战自己，在不使用人工智能的情况下解决问题，以培养自己的技能。 Invest in core skills: Sharpen your ability to design systems, think through edge cases, write tests, and debug deeply. These are long-term career skills that AI can’t substitute. Make code quality and clarity your personal mission on every task.\n投资核心技能： 提高设计系统、思考极端情况、编写测试和深入调试的能力。这些是人工智能无法替代的长期职业技能。让代码质量和清晰度成为您每项任务的个人使命。 For senior devs: Leverage your experience to guide AI (through good prompts) and to vet its outputs. Take the lead in integrating AI into your team’s workflow responsibly – set standards for usage and ensure knowledge is shared. Use the time saved by AI to tackle more ambitious projects and to mentor others.\n对于高级开发人员： 利用您的经验来指导 AI（通过良好的提示）并审查其输出。带头负责任地将 AI 集成到团队的工作流程中 - 设定使用标准并确保知识共享。利用 AI 节省的时间来处理更雄心勃勃的项目并指导他人。 For junior devs: Focus on becoming the kind of engineer who understands and can improve the code that AI generates. Build a reputation for thoroughness – always test and double-check your work. Learn from every bug and feedback. By doing so, you’ll quickly move into work that AI alone can’t do, increasing your value.\n对于初级开发人员： 专注于成为能够理解并改进 AI 生成的代码的工程师。树立严谨的声誉——始终测试并仔细检查您的工作。从每个错误和反馈中学习。通过这样做，您将很快从事 AI 无法独自完成的工作，从而提高您的价值。 Stay adaptive: The tools will keep evolving. Continuously update your toolset and skills. But if you have solid fundamentals and a collaborative attitude, you’ll be able to ride any wave of technology.\n保持适应性： 工具会不断发展。不断更新您的工具集和技能。但如果您拥有扎实的基础和协作态度，您将能够驾驭任何技术浪潮。 The era of AI-assisted coding is here, and it’s making routine coding faster. This frees us, as developers, to concentrate on the harder and more meaningful aspects of software creation. By maximizing our focus on that “last 30%” – the critical thinking, the design finesse, the quality checks – we ensure not only our relevance, but also that we deliver better software.\n人工智能辅助编码的时代已经到来，它让日常编码变得更快。这让我们这些开发人员可以专注于软件开发中更难、更有意义的方面。通过最大限度地关注“最后 30%”——批判性思维、设计技巧、质量检查——我们不仅可以确保我们的相关性，还可以提供更好的软件。\nIn the end, great software engineering has always been about problem-solving, not just code-slinging. AI doesn’t change that - it simply challenges us to elevate our problem-solving to the next level. Embrace that challenge, and you’ll thrive in this new chapter of our industry.归根结底，伟大的软件工程始终是解决问题，而不仅仅是编写代码。人工智能不会改变这一点 - 它只是挑战我们将解决问题的能力提升到一个新的水平。接受这一挑战，您将在我们行业的新篇章中茁壮成长。\n","date":"2025-03-16","permalink":"https://22cs.github.io/post/beyond-the-70-maximizing-the-human-30-of-aiassisted-coding-zuyie4.html","title":"Beyond the 70%: Maximizing the human 30% of AI-assisted coding"}]